# $Id$ #

####################################################################
####################################################################
## Process this file with autoconf to produce a configure script. ##
## DO NOT EDIT THIS FILE !!                                       ##
##                                                                ##
## author: mcottret@laas.fr                                       ##
####################################################################
####################################################################

#  #

#########################
# Autoconf requirements #
#########################

AC_INIT(jafar,0.0,mcottret@laas.fr)
AC_CONFIG_AUX_DIR(config)
AC_PREREQ(2.59)
if test "$JAFAR_DIR" = ""; then
  AC_MSG_ERROR("variable \$JAFAR_DIR not found.You must define \$JAFAR_DIR to point to your jafar directory.",2)
fi
AC_PREFIX_DEFAULT("$JAFAR_DIR")

#######################
# Package information #
#######################

AC_LANG(C++)
AC_CONFIG_HEADERS(include/jafarConfig.h)

######################
# Check for programs #
######################

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

AC_PROG_CC
AC_PROG_CXX
AC_PROG_LN_S
AC_PROG_AWK

## check for libtool ##
LD_TWOLEVEL_NAMESPACE="1"
AC_LIBTOOL_DLOPEN
AC_DISABLE_STATIC
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_PROG_INSTALL

MD_SHLIB_SUFFIX
AC_SUBST(SHLIB_SUFFIX)

## check for swig ##
SWIG_PROG
SWIG_ENABLE_CXX

## Check for a Tcl shell ##
AC_PATH_PROG([TCLSH], [tclsh eltclsh])
if test -z "$TCLSH"; then
  AC_MSG_ERROR([Cannot find a Tcl shell])
fi
AC_SUBST(TCLSH)
AC_CONFIG_FILES([bin/jafar-module], [chmod +x bin/jafar-module])
AC_CONFIG_FILES([bin/pkg_mkIndex],  [chmod +x bin/pkg_mkIndex])

## Check if we want to enable dot support in Doxygen ##
AC_PATH_PROG([DOT], [dot])
if test -z "$DOT"; then
    AC_MSG_WARN([Cannot find dot in the path, disabling class graphs in Doxygen])
    HAVE_DOT=NO
else
    HAVE_DOT=YES
fi
AC_SUBST(HAVE_DOT)
AC_CONFIG_FILES(Doxyfile)

#######################
# Check for libraries #
#######################

dnl extra include and extra libs
MD_EXTRA_INCLUDES
MD_EXTRA_LIBS

AC_ARG_ENABLE(lang, AC_HELP_STRING([--enable-lang=lang], 
                        [space-separated list of scripting languages to use (default: tcl, available: ruby, tcl)]),
             [REQUIRED_SCRIPT_LANGUAGES=$enableval], [REQUIRED_SCRIPT_LANGUAGES=""])

if test -z "$REQUIRED_SCRIPT_LANGUAGES" || (echo "$REQUIRED_SCRIPT_LANGUAGES" | grep -q 'tcl' 2>&1); then 
    ## check for tcl/tk ##
    MD_CHECK_TCLTK([SCRIPT_LANGUAGES="tcl $SCRIPT_LANGUAGES"], [
        if test -n "$REQUIRED_SCRIPT_LANGUAGES"; then
            AC_MSG_ERROR([Tcl support required but unavailable])
        fi
    ])
fi

# Disable Ruby for now
if echo "$REQUIRED_SCRIPT_LANGUAGES" | grep -q 'ruby' 2>&1; then
    ## check for ruby ##
    MD_CHECK_RUBY([SCRIPT_LANGUAGES="ruby $SCRIPT_LANGUAGES"], [
        if test -n "$REQUIRED_SCRIPT_LANGUAGES"; then
            AC_MSG_ERROR([Ruby support is required but unavailable])
        fi
    ])
fi

AC_SUBST(SCRIPT_LANGUAGES)

AVAIL_EXTLIBS=

## check for boost ##
MD_FIND_PACKAGE(boost, boost_date_time, boost/version.hpp, [support for boost C++ library])
if test "x$with_boost" = "xyes";
then
    BOOST_CPPFLAGS="$boost_cppflags"
    BOOST_LDFLAGS="$with_boostlib"
    BOOST_DATETIME_LIBS="-lboost_date_time"
    BOOST_THREAD_LIBS="-lboost_thread"
    AVAIL_EXTLIBS="boost $AVAIL_EXTLIBS" 
    AC_SUBST(BOOST_CPPFLAGS)
    AC_SUBST(BOOST_LDFLAGS)
    AC_SUBST(BOOST_DATETIME_LIBS)
    AC_SUBST(BOOST_THREAD_LIBS)
    AC_DEFINE(HAVE_BOOST,1,[boost library])
fi

## check for openCV ##
MD_FIND_PACKAGE_OPT(opencv, cxcore, opencv/cxcore.h, [support for openCV library])
if test "x$with_opencv" = "xyes";
then
    OPENCV_CPPFLAGS="$opencv_cppflags"
    OPENCV_LDFLAGS="$with_opencvlib"
    OPENCV_LIBS="-lcxcore -lcv -lcvaux -lhighgui"
    AVAIL_EXTLIBS="opencv $AVAIL_EXTLIBS"
    AC_SUBST(OPENCV_CPPFLAGS)
    AC_SUBST(OPENCV_LDFLAGS)
    AC_SUBST(OPENCV_LIBS)
    AC_DEFINE(HAVE_OPENCV,1,[openCV library])
fi

## check for Qt4 ##
PKG_CHECK_MODULES(QT4, QtCore QtGui >= 4.1.0, HAVE_QT4="yes", HAVE_QT4="no")
if test "x$HAVE_QT4" = "xyes"; then
  dnl Check needed because in some cases the QtGui includedir
  dnl doesn't contain the subsystem dir.
  QT_INCLUDE_DIR=`$PKG_CONFIG --variable=includedir QtGui`
  EXTRA_QT_INCLUDE_DIR="$QT_INCLUDE_DIR/Qt"
  AC_CHECK_FILE([$QT_INCLUDE_DIR/QWidget],
  AC_MSG_NOTICE([No extra QT_INCLUDE_DIR needed]),
  AC_CHECK_FILE([$EXTRA_QT_INCLUDE_DIR/QWidget],
    QT4_CPPFLAGS="$QT4_CPPFLAGS -I$EXTRA_QT_INCLUDE_DIR",
    AC_MSG_WARN([QWidget not found])))
    AC_CHECK_PROG(MOC, [moc], [moc])
    AC_CHECK_PROG(MOC, [moc-qt4], [moc-qt4])
fi
if test "x$HAVE_QT4" = "xno"; then
  AC_MSG_NOTICE([Looking for QT4_CPPFLAGS and QT4_LIBS without pkg-config])
  case "$host_os" in
    darwin*)
      AC_ARG_WITH([qt4dir],
        [AS_HELP_STRING([--with-qt4dir=DIR],
        [Qt4 installation directory used for OS-X.
        For other systems use pkg-config.])],
        [QT4DIR=$withval]
        )
      if test x"$QT4DIR" = x ; then
        AC_MSG_WARN([*** No path for Qt4 --with-qt4dir option given])
      fi
      AC_MSG_RESULT([QT4DIR... $QT4DIR])
      AC_CHECK_PROG(MOC, [moc], [$QT4DIR/bin/moc], [], $QT4DIR/bin)
      if test x"$MOC" = x; then
        AC_MSG_WARN([*** This is not the right Qt installation])
      fi
      QT4_CPPFLAGS="-F$QT4DIR/lib -I$QT4DIR/lib/QtCore.framework/Headers"
      QT4_CPPFLAGS="$QT4_CPPFLAGS -I$QT4DIR/lib/QtGui.framework/Headers"
      QT4_LIBS="-Xlinker -F$QT4DIR/lib -Xlinker -framework -Xlinker QtCore"
      QT4_LIBS="$QT4_LIBS -Xlinker -framework -Xlinker QtGui"
      ;;
    *)
      AC_MSG_WARN([*** Please check PKG_CONFIG_PATH or the version
      of your installed Qt4 installation.])
      ;;
  esac
fi
AC_MSG_NOTICE([Set QT4_CPPFLAGS... $QT4_CPPFLAGS])
AC_SUBST(QT4_CPPFLAGS)
AC_SUBST(QT4_LIBS)
QT4_LDFLAGS=""
AC_SUBST(QT4_LDFLAGS)

## check for boost-sandbox ##
MD_FIND_PACKAGE_OPT(boost_sandbox,[], boost/numeric/bindings/lapack/lapack.h, [support for ublas lapack bindings from boost sandbox])
if test "x$with_boost_sandbox" = "xyes";
then
    BOOST_SANDBOX_CPPFLAGS="$boost_sandbox_cppflags"
    AVAIL_EXTLIBS="boost_sandbox $AVAIL_EXTLIBS"
    AC_SUBST(BOOST_SANDBOX_CPPFLAGS)
    AC_DEFINE(HAVE_BOOST_SANDBOX,1,[boost sandbox library])
fi

## check for lapack ##
MD_FIND_PACKAGE_OPT(lapack, lapack,[], [support for Linear Algebra Package (LAPACK)])
MD_FIND_PACKAGE_OPT(accelerate, [], Accelerate/Accelerate.h, [support for LAPACK through Accelerate Framework (only available on MacOSX)])
if test "x$with_lapack" = "xyes";
then
    LAPACK_LDFLAGS="$with_lapacklib"
    LAPACK_LIBS="-llapack"
    AVAIL_EXTLIBS="lapack $AVAIL_EXTLIBS"
    AC_SUBST(LAPACK_LDFLAGS)
    AC_SUBST(LAPACK_LIBS)
    AC_DEFINE(HAVE_LAPACK,1,[lapack library])
fi
if test "x$with_accelerate" = "xyes";
then
    LAPACK_LIBS="-Wl,-framework -Wl,Accelerate"
    LAPACK_LDFLAGS="-faltivec"
    AVAIL_EXTLIBS="lapack $AVAIL_EXTLIBS"
    AC_SUBST(LAPACK_LDFLAGS)
    AC_SUBST(LAPACK_LIBS)
    AC_DEFINE(HAVE_LAPACK,1,[lapack library])
fi


## check for openGL ##
MD_FIND_PACKAGE_OPT(opengl, GL, GL/gl.h, [support for openGL])
if test "x$with_opengl" = "xyes";
then
    OPENGL_CPPFLAGS="$opengl_cppflags"
    OPENGL_LDFLAGS="$with_opengllib"
    OPENGL_LIBS="-lGL"
    AVAIL_EXTLIBS="opengl $AVAIL_EXTLIBS"
    AC_SUBST(OPENGL_CPPFLAGS)
    AC_SUBST(OPENGL_LDFLAGS)
    AC_SUBST(OPENGL_LIBS)
    AC_DEFINE(HAVE_OPENGL,1,[openGL library])
fi

## check for GDHE ##
MD_FIND_PACKAGE_OPT(gdhe, GDHE, gdhe/GDHE.h, [support for GDHE])
if test "x$with_gdhe" = "xyes";
then
    GDHE_CPPFLAGS="$gdhe_cppflags"
    GDHE_LDFLAGS="$with_gdhelib"
    GDHE_LIBS="-lGDHE"
    AVAIL_EXTLIBS="gdhe $AVAIL_EXTLIBS"
    AC_SUBST(GDHE_CPPFLAGS)
    AC_SUBST(GDHE_LDFLAGS)
    AC_SUBST(GDHE_LIBS)
    AC_DEFINE(HAVE_GDHE,1,[GDHE 3D display server])
fi

## check for Bayes++ ##
MD_FIND_PACKAGE_OPT(bayespp, BayesFilterr, BayesFilter/bayesFlt.hpp, [support for Bayes++, a bayesian filtering library])
if test "x$with_bayespp" = "xyes";
then
    BAYESPP_CPPFLAGS="$bayespp_cppflags"
    BAYESPP_LDFLAGS="$with_bayespplib"
    BAYESPP_LIBS="-lBayesFilterr"
    AVAIL_EXTLIBS="bayespp $AVAIL_EXTLIBS"
    AC_SUBST(BAYESPP_CPPFLAGS)
    AC_SUBST(BAYESPP_LDFLAGS)
    AC_SUBST(BAYESPP_LIBS)
    AC_DEFINE(HAVE_BAYESPP,1,[Bayes++ library])
fi

## check for PNL and PNLHigh ##
MD_FIND_PACKAGE_OPT(pnl,pnl,pnl_dll.hpp,[support for PNL, Intel's Probabilistic Network Library])
MD_FIND_PACKAGE_OPT(pnlhigh,[],pnlHigh.hpp,[headers for PNLWrapper])
if test "x$with_pnl" = "xyes" && test "x$with_pnlhigh" = "xyes";
then
	PNL_CPPFLAGS="$pnl_cppflags $pnl_cppflags/opencx $pnlhigh_cppflags"
	PNL_LDFLAGS="$with_pnllib"
	PNL_LIBS="-lpnl -lhigh"
	AVAIL_EXTLIBS="pnl $AVAIL_EXTLIBS"
	AC_SUBST(PNL_CPPFLAGS)
	AC_SUBST(PNL_LDFLAGS)
	AC_SUBST(PNL_LIBS)
	AC_DEFINE(HAVE_PNL,1,[PNL library])
fi

## check for CGAL ##
MD_FIND_PACKAGE_OPT(cgal, CGAL, CGAL/config.h, [CGAL,  Computational Geometry Algorithms Library])
if test "x$with_cgal" = "xyes";
then
    CGAL_CPPFLAGS="$cgal_cppflags $cgal_cppflags/CGAL/config/$CGAL_OS_COMPILER"
    CGAL_LDFLAGS="$with_cgallib"
    CGAL_LIBS="-lCGAL"
    AVAIL_EXTLIBS="cgal $AVAIL_EXTLIBS"
    AC_SUBST(CGAL_CPPFLAGS)
    AC_SUBST(CGAL_LDFLAGS)
    AC_SUBST(CGAL_LIBS)
    AC_DEFINE(HAVE_CGAL,1,[CGAL library])
fi

## check for dc1394 and raw1384 ##
MD_FIND_PACKAGE_OPT(raw1394, raw1394, libraw1394/raw1394.h, [support for raw1394])
MD_FIND_PACKAGE_OPT(dc1394, dc1394_control, libdc1394/dc1394_control.h, [support for dc1394])
if test "x$with_dc1394" = "xyes" && test "x$with_raw1394" = "xyes";
then
    IEEE1394_CPPFLAGS="$raw1394_cppflags $dc1394_cppflags"
    IEEE1394_LDFLAGS="$with_raw1394lib $with_dc1394lib"
    IEEE1394_LIBS="-lraw1394 -ldc1394_control"
    AVAIL_EXTLIBS="ieee1394 $AVAIL_EXTLIBS"
    AC_SUBST(IEEE1394_CPPFLAGS)
    AC_SUBST(IEEE1394_LDFLAGS)
    AC_SUBST(IEEE1394_LIBS)
    AC_DEFINE(HAVE_IEEE1394,1,[IEEE1394 support])
fi

## check for video4linux ##
MD_FIND_PACKAGE_OPT(v4l, [], linux/videodev.h, [support for v4l (only available on Linux)])
if test "x$with_v4l" = "xyes";
then
    AVAIL_EXTLIBS="v4l $AVAIL_EXTLIBS"
    AC_DEFINE(HAVE_V4L,1,[v4l support])
fi

## check for quicktime
MD_FIND_PACKAGE_OPT(quicktime, [], QuickTime/QuickTime.h, [support for QuickTime (only available on MacOSX)])
if test "x$with_quicktime" = "xyes";
then
    QUICKTIME_LDFLAGS="-Wl,-framework -Wl,Carbon -Wl,-framework -Wl,Quicktime"
    AVAIL_EXTLIBS="quicktime $AVAIL_EXTLIBS"
    AC_SUBST(QUICKTIME_LDFLAGS) 
    AC_DEFINE(HAVE_QUICKTIME,1)
fi  


AC_SUBST(AVAIL_EXTLIBS)
##########################
# Check for header files #
##########################

###################
# Check for types #
###################

########################
# Check for structures #
########################

######################################
# Check for compiler characteristics #
######################################

###############################
# Check for library functions #
###############################

#############################
# Check for system services #
#############################
AC_C_BIGENDIAN

AC_CONFIG_FILES(Module.config)
AC_OUTPUT

if test -z $SCRIPT_LANGUAGES; then
    AC_MSG_WARN([No scripting language available])
else
    echo "Scripting languages: $SCRIPT_LANGUAGES"
    echo "Configured with following external libs: $AVAIL_EXTLIBS"
fi
echo "Now, you can run - make - in your modules ! :-)"


# $Id: Module.make 701 2005-02-17 15:02:28Z tlemaire $ #

# list of source files
#######################

SRCSC = $(wildcard $(dev_srcdir)/*.c)
SRCSCPP = $(wildcard $(dev_srcdir)/*.cpp) 
TESTCPP = $(wildcard $(dev_testdir)/*.cpp) 
DEV_HEADERS = $(wildcard $(dev_includedir)/$(MODULE)/*.hpp) $(wildcard $(dev_includedir)/$(MODULE)/*.tpp) $(wildcard $(dev_includedir)/$(MODULE)/*.h)
HEADERS = $(patsubst %.hpp, $(includedir)/$(MODULE)/%.hpp, $(notdir $(wildcard $(dev_includedir)/$(MODULE)/*.hpp)))
HEADERS+= $(patsubst %.tpp, $(includedir)/$(MODULE)/%.tpp, $(notdir $(wildcard $(dev_includedir)/$(MODULE)/*.tpp)))
HEADERS+= $(patsubst %.h, $(includedir)/$(MODULE)/%.h, $(notdir $(wildcard $(dev_includedir)/$(MODULE)/*.h)))
SWIG_LIBS = $(patsubst %.i, $(includedir)/$(MODULE)/%.i, $(notdir $(wildcard $(dev_includedir)/$(MODULE)/*.i)))

# .dep files
#############

SRCS_DEP = \
    $(patsubst %.cpp,$(dev_objdir)/%.dep,$(notdir $(SRCSCPP))) \
    $(patsubst %.c,$(dev_objdir)/%.dep,$(notdir $(SRCSC))) \
    $(patsubst %.cpp,$(dev_testdir)/$(BUILD)/%.dep,$(notdir $(TESTCPP)))


# .o files
###########

OBJS = $(patsubst %.cpp,$(dev_objdir)/%.lo,$(notdir $(SRCSCPP))) $(patsubst %.c,$(dev_objdir)/%.lo,$(notdir $(SRCSC)))

TESTOBJS = $(patsubst %.cpp,$(dev_testdir)/$(BUILD)/%.lo,$(notdir $(TESTCPP)))


# Standard rules
#################

all: lib $(SCRIPT_LANGUAGES)

# C++ compilation
##################

$(dev_objdir)/%.lo: $(dev_srcdir)/%.c
	$(LTCXX) $(CXXFLAGS) -c $(CPPFLAGS) $(CPPFLAGS_MODULE) -o $@ $<

$(dev_objdir)/%.lo: $(dev_srcdir)/%.cpp
	$(LTCXX) $(CXXFLAGS) -c $(CPPFLAGS) $(CPPFLAGS_MODULE) -o $@ $<

# ruby module generation using swig
###################################
ifneq ($(findstring ruby,$(SCRIPT_LANGUAGES)),)
RUBY_EXTLIB=$(MODULE)$(SHLIB_SUFFIX)
SWIG_INPUT = $(wildcard $(dev_includedir)/*.i)
SWIG_JAFAR_HEADERS = $(JAFAR_DIR)/swig/jafar.i $(JAFAR_DIR)/swig/jafarRuby.i

RUBY_USER_SCRIPTS += $(patsubst %.rb, $(rubylibdir)/$(MODULE)/%.rb, $(notdir $(wildcard $(dev_macrodir)/*.rb)))
RUBY_MAIN_SCRIPT  = $(rubylibdir)/$(MODULE).rb
RUBY_OTHER_SCRIPTS = $(filter-out $(rubylibdir)/$(MODULE)/$(MODULE).rb,$(RUBY_USER_SCRIPTS))
RUBY_WRAPPER_CPP=$(dev_srcdir)/ruby/$(MODULE)_wrap.cpp

ruby: $(rubylibdir)/$(MODULE)/$(RUBY_EXTLIB) $(RUBY_OTHER_SCRIPTS) $(RUBY_MAIN_SCRIPT)

# wrapper dependencies
SRCS_DEP += $(dev_objdir)/ruby/$(MODULE)_wrap.dep
$(dev_objdir)/ruby/$(MODULE)_wrap.dep: $(dev_includedir)/$(MODULE).i
	@echo "Making dependencies for $< (ruby)"
	-@mkdir -p $(dev_srcdir)/ruby
	-@$(SWIG) -MM $(SWIGFLAGS) $(SWIGFLAGS_RUBY) $(CPPFLAGS) -I/usr/include -o $(RUBY_WRAPPER_CPP) $(dev_includedir)/$(MODULE).i > /dev/null
	-@mkdir -p $(dev_objdir)/tcl
	-@mv $(dev_srcdir)/ruby/$(MODULE)_wrap.d $(dev_objdir)/ruby/$(MODULE)_wrap.dep

$(dev_objdir)/ruby/$(RUBY_EXTLIB): $(RUBY_WRAPPER_CPP) $(dev_objdir)/ruby/Makefile $(dev_libdir)/lib$(MODULE).la
	$(MAKE) -C $(dev_objdir)/ruby

$(RUBY_WRAPPER_CPP): $(SWIG_INPUT) $(DEV_HEADERS) $(SWIG_JAFAR_HEADERS)
	@echo ""
	@echo "    *************************************"
	@echo "    * Generating ruby wrappers with SWIG *"
	@echo "    *************************************"
	@echo ""
	$(SWIG) $(SWIGFLAGS) $(SWIGFLAGS_RUBY) $(CPPFLAGS) -I/usr/include -o $(RUBY_WRAPPER_CPP) $(dev_includedir)/$(MODULE).i || ( rm -f $(RUBY_WRAPPER_CPP) && exit 1 )

$(dev_objdir)/ruby/Makefile: $(dev_srcdir)/ruby/extconf.rb
	-@mkdir -p $(dev_objdir)/ruby
	cd $(dev_objdir)/ruby && $(RUBY) $(dev_srcdir)/ruby/extconf.rb \
		--with-ruby='$(RUBY)' --with-cppflags='$(CPPFLAGS) $(CXXFLAGS)' \
		--with-ldflags='$(LDFLAGS) -l$(MODULE) -lstdc++ -Wl,-rpath -Wl,$(libdir)'

# Install all macros but $(MODULE).rb in $(rubylibdir)/$(MODULE)
$(rubylibdir)/$(MODULE)/%.rb: $(dev_macrodir)/%.rb
	@echo " Installing ruby macro $< to $@"
	-@mkdir -p $(rubylibdir)/$(MODULE)
	@cp -f $< $@

$(RUBY_MAIN_SCRIPT): $(dev_macrodir)/$(MODULE).rb
	@echo " Installing ruby main macro $< to $@"
	@cp -f $< $@

$(rubylibdir)/$(MODULE)/$(RUBY_EXTLIB) : $(dev_objdir)/ruby/$(RUBY_EXTLIB)
	-@mkdir -p $(rubylibdir)/$(MODULE)
	@cp -f $< $@

clean: clean-ruby
clean-ruby:
	rm -f $(dev_srcdir)/ruby/$(MODULE)_wrap.cpp
	rm -rf $(rubylibdir)/$(MODULE)*

endif

# tcl module generation using swig
###################################
ifneq ($(findstring tcl,$(SCRIPT_LANGUAGES)),)
tcl: $(tclpkgdir)/pkgIndex.tcl

MACROS = $(patsubst %.tcl, $(tclpkgdir)/%.tcl, $(notdir $(wildcard $(dev_macrodir)/*.tcl)))
SWIG_INPUT = $(wildcard $(dev_includedir)/*.i)
TCL_WRAPPER_CPP=$(dev_srcdir)/tcl/$(MODULE)_wrap.cpp

# wrapper dependencies
SRCS_DEP += $(dev_objdir)/tcl/$(MODULE)_wrap.dep
$(dev_objdir)/tcl/$(MODULE)_wrap.dep: $(dev_includedir)/$(MODULE).i
	@echo "Making dependencies for $(dev_includedir)/$(MODULE).i (tcl)"
	-@mkdir -p $(dev_srcdir)/tcl
	-@$(SWIG) -MM $(SWIGFLAGS) $(SWIGFLAGS_TCL) $(CPPFLAGS) -I/usr/include -o $(TCL_WRAPPER_CPP) $(dev_includedir)/$(MODULE).i > /dev/null
	-@mkdir -p $(dev_objdir)/tcl
	-@mv $(dev_srcdir)/tcl/$(MODULE)_wrap.d $(dev_objdir)/tcl/$(MODULE)_wrap.dep


$(tclpkgdir)/pkgIndex.tcl : $(tclpkgdir)/$(MODULE)$(SHLIB_SUFFIX) $(MACROS)
	$(JAFAR_DIR)/bin/pkg_mkIndex $(tclpkgdir) $(MODULE)

$(dev_objdir)/tcl/$(MODULE)_wrap.lo : $(SWIG_INPUT) $(DEV_HEADERS)
	@echo ""
	@echo "    *************************************"
	@echo "    * Generating tcl wrappers with SWIG *"
	@echo "    *************************************"
	@echo ""
	$(SWIG) $(SWIGFLAGS) $(SWIGFLAGS_TCL) $(CPPFLAGS) -I/usr/include -o $(TCL_WRAPPER_CPP) $(dev_includedir)/$(MODULE).i
	$(LTCXX) $(CXXFLAGS) -c $(CPPFLAGS) $(TCL_CPPFLAGS) -o $@ $(TCL_WRAPPER_CPP)

$(dev_libdir)/lib$(MODULE)_swig.la : $(dev_objdir)/tcl/$(MODULE)_wrap.lo $(dev_libdir)/lib$(MODULE).la
	$(LTLD) $(LDFLAGS) $(TCL_LDFLAGS) -o $@ -rpath $(tclpkgdir) -version-info $(MODULE_VERSION):$(MODULE_REVISION) $(LIBS) -l$(MODULE) $(TCL_LIBS) $<

$(tclpkgdir)/%.tcl: $(dev_macrodir)/%.tcl
	-$(LIBTOOL) --mode=install cp $< $@

$(tclpkgdir)/$(MODULE)$(SHLIB_SUFFIX) : $(dev_libdir)/lib$(MODULE)_swig.la
	-@mkdir -p $(tclpkgdir)
	$(LIBTOOL) --mode=install cp $(dev_libdir)/lib$(MODULE)_swig.la $(tclpkgdir)
	-ln -fs $(tclpkgdir)/lib$(MODULE)_swig$(SHLIB_SUFFIX) $(tclpkgdir)/$(MODULE)$(SHLIB_SUFFIX)

tcl-lib : $(dev_libdir)/lib$(MODULE)_swig.la

clean: tcl-clean
tcl-clean:
	-@rm -fr $(tclpkgdir)
	-@rm -fr $(dev_srcdir)/tcl

endif

# ruby module generation using SWIG
###################################

$(dev_objdir)/ruby/$(MODULE)_wrap.lo : $(dev_includedir)/$(MODULE).i $(dev_includedir)/$(MODULE)Tools.i $(DEV_HEADERS)
	@echo ""
	@echo "    **************************************"
	@echo "    * Generating ruby wrappers with SWIG *"
	@echo "    **************************************"
	@echo ""
	$(SWIG) $(SWIGFLAGS) $(SWIGFLAGS_RUBY) $(CPPFLAGS) -I/usr/include -o $(dev_srcdir)/ruby/$(MODULE)_wrap.cpp $<
	$(LTCXX) $(CXXFLAGS) -c $(CPPFLAGS) $(RUBY_CPPFLAGS) -o $@ $(dev_srcdir)/ruby/$(MODULE)_wrap.cpp


$(dev_libdir)/lib$(MODULE)_ruby.so : $(dev_objdir)/ruby/$(MODULE)_wrap.lo $(dev_libdir)/lib$(MODULE).la
	$(LTLD) $(LDFLAGS) $(RUBY_LDFLAGS)

ruby-lib : $(dev_libdir)/lib$(MODULE)_ruby.so

# module library
#################

$(includedir)/$(MODULE)/%.hpp: $(dev_includedir)/$(MODULE)/%.hpp
	-$(LIBTOOL) --mode=install cp $< $@

$(includedir)/$(MODULE)/%.tpp: $(dev_includedir)/$(MODULE)/%.tpp
	-$(LIBTOOL) --mode=install cp $< $@

$(includedir)/$(MODULE)/%.h: $(dev_includedir)/$(MODULE)/%.h
	-$(LIBTOOL) --mode=install cp $< $@

$(includedir)/$(MODULE)/%.i: $(dev_includedir)/$(MODULE)/%.i
	-$(LIBTOOL) --mode=install cp $< $@

$(dev_libdir)/lib$(MODULE).la : $(OBJS)
	$(LTLD) $(LDFLAGS) -o $@ -rpath $(libdir) -R $(libdir) -version-info $(MODULE_VERSION):$(MODULE_REVISION) $(LIBS) $^

$(libdir)/lib$(MODULE).la: $(dev_libdir)/lib$(MODULE).la
	$(LIBTOOL) --mode=install cp $(dev_libdir)/lib$(MODULE).la $(libdir)

lib-install : $(libdir)/lib$(MODULE).la $(HEADERS) $(SWIG_LIBS)

lib : module_dep dirs lib-install


# build dirs
#############

dirs :
	-@mkdir -p $(dev_libdir)
	-@mkdir -p $(dev_srcdir)/tcl
	-@mkdir -p $(dev_objdir)
	-@mkdir -p $(dev_objdir)/tcl
	-@mkdir -p $(dev_testdir)/$(BUILD)
	-@mkdir -p $(includedir)/$(MODULE)
	-@mkdir -p $(libdir)



# clean rules
##############
clean: clean-build clean-headers clean-test

clean-build: clean-objs clean-headers clean-dep
	$(LIBTOOL) --mode=clean rm -f $(dev_libdir)/lib$(MODULE).la
	$(LIBTOOL) --mode=clean rm -f $(dev_libdir)/lib$(MODULE)_swig.la
	$(LIBTOOL) --mode=clean rm -f $(libdir)/lib$(MODULE).*

clean-objs:
	-@rm -fr $(dev_objdir)

clean-dep:
	-@rm -f $(dev_objdir)/*.dep

clean-headers:
	-@rm -fr $(includedir)/$(MODULE)

clean-test:
	-@rm -fr $(dev_testdir)/$(BUILD)



# dependances rules
####################

$(dev_objdir)/%.dep: $(dev_srcdir)/%.cpp
	-@mkdir -p $(dev_objdir)
	@echo "Making dependencies for $<"
	-@$(CXX) -MM $(CPPFLAGS) -MT"$(patsubst %.cpp,$(dev_objdir)/%.lo,$(notdir $<))" -MF$@ $<

$(dev_objdir)/%.dep: $(dev_srcdir)/%.c
	-@mkdir -p $(dev_objdir)
	@echo "Making dependencies for $<"
	-@$(CXX) -MM $(CPPFLAGS) -MT"$(patsubst %.c,$(dev_objdir)/%.lo,$(notdir $<))" -MF$@ $<


# modules and external libraries dependancies rules
###################################################
module_dep : $(REQUIRED_MODULES) $(OPTIONAL_MODULES) $(REQUIRED_EXTLIBS) $(OPTIONAL_EXTLIBS)

$(REQUIRED_MODULES):
	@(if test -d $(JAFAR_DIR)/modules/$@; \
	then cd $(JAFAR_DIR)/modules/$@; $(MAKE) $(MAKECMDGOALS); \
	else \
	echo "[ERROR] Required module $@ not available. You need to checkout this module"; \
	exit 1;\
	fi;)

$(OPTIONAL_MODULES):
	@(if test -d $(JAFAR_DIR)/modules/$@; \
	then cd $(JAFAR_DIR)/modules/$@; $(MAKE) $(MAKECMDGOALS); \
	else \
	echo "[WARNING] Optional module $@ not available. Some functionalities might be disabled"; \
	fi;)

$(REQUIRED_EXTLIBS) :
ifneq ($(AWK),)
	@(if test 0 -eq `echo "$(AVAIL_EXTLIBS)" | awk '{print index($$0,"$@")}'`; \
	then \
	echo "[ERROR] Required library $@ not available."; \
	echo "Enable this library in the configure script."; \
	exit 1;\
	fi;)
else
	@echo "[WARNING] Awk not install on your system. No external libraries dependencies checking"
endif

$(OPTIONAL_EXTLIBS) :
ifneq ($(AWK),)
	@(if test 0 -eq `echo "$(AVAIL_EXTLIBS)" | awk '{print index($$0,"$@")}'`; \
	then \
	echo "[WARNING] Optional library $@ not available."; \
	echo "Some functionalities might be disabled, you can enable this library in the configure script."; \
	fi;)
else
	@echo "[WARNING] Awk not install on your system. No external libraries dependencies checking"
endif


# libtool and configure rules
##############################
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status --recheck


# For an explanation of the following Makefile rules, see node
# `Automatic Remaking' in GNU Autoconf documentation.
Module.config: Module.config.in User.make config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= ./config.status

config.status: configure
	./config.status --recheck

config.h: stamp-h

stamp-h: config.h.in config.status ./config/user.ac
	CONFIG_FILES= CONFIG_HEADERS=config.h ./config.status
	date > stamp-h

# unit test rules
##################

test: test-build
#	@echo ""
#	@echo "    **************************************"
#	@echo "    * Running tests for module $(MODULE) *"
#	@echo "    **************************************"
#	@echo ""
	@$(dev_testdir)/$(BUILD)/test_suite_$(MODULE)


$(dev_testdir)/$(BUILD)/%.dep: $(dev_testdir)/%.cpp
	-@mkdir -p $(dev_testdir)/$(BUILD)
	@echo "Making dependencies for $<"
	-@$(CXX) -MM $(CPPFLAGS) -MT"$(patsubst %.cpp,$(dev_testdir)/$(BUILD)/%.lo,$(notdir $<))" -MF$@ $<


$(dev_testdir)/$(BUILD)/%.lo: $(dev_testdir)/%.cpp $(dev_testdir)/$(BUILD)/%.dep
	-@mkdir -p $(dev_testdir)/$(BUILD)
	@echo "compile $@"
	$(LTCXX) $(CXXFLAGS) -c $(CPPFLAGS)  $(BOOST_CPPFLAGS) -o $@ $<

test-build: dirs lib $(dev_testdir)/$(BUILD)/test_suite_$(MODULE)

$(dev_testdir)/$(BUILD)/test_suite_$(MODULE): $(TESTOBJS)
	-@mkdir -p $(dev_testdir)/$(BUILD)
	@echo "link"
	$(LTLD) $(CXXFLAGS) $(LDFLAGS) $(BOOST_LDFLAGS) -l$(MODULE) -lboost_unit_test_framework -o $@ $^

.PHONY: $(USE_MODULES)

# include dep files
####################

ifeq ($(findstring $(MAKECMDGOALS),clean),)
-include $(SRCS_DEP)
endif


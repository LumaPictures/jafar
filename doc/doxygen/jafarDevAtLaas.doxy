/* $Id$ */

/*! \page pageJafarDevAtLaas Development with Jafar at LAAS

\section secLaasRepository Jafar under version control at LAAS

At LAAS we use git to version control the jafar tree.

\section subsecLaasSvnBeforeYouStart Before you start

- You must be in the \b robots user group to use the git repository (even for a simple checkout). To get into this group, send a request to sysadmin@laas.fr.
- You must have a umask equal to 2, edit your ~/.tcshrc and add the following:

\code
umask 2
\endcode

\subsection subsecLaasGitAbout About Git

Git is really different from CVS or SVN, as it can work in distributed mode.
Contrary to CVS/SVN, git commit does not expose the commit to every one, it
only does the commit in your own repository. To push it in the main repository,
you need to call git push. You can push many commit in one operation. With git,
it is easy to do a lot of little atomic commit, and push the whole stuff when
it is really ready.

There a lot of interesting resources about git on Internet :
 - a tutorial : http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html
 - git for svn user : http://git.or.cz/course/svn.html
 - git reference :  http://gitref.org/
 - git help or man git

\subsection subsecLaasGitRep Git repository layout

The core part of Jafar is stored in the repository trac.laas.fr/git/robots/jafar/jafar.git.
Each modules has its own git repository in trac.laas.fr/git/robots/jafar/modules/<module>.git

Do not hesitate to tag versions of your modules, and to use branches for
developpement. It is more or less free with Git.

The repository can be browsed online at this url http://trac.laas.fr/git/, in
the sub-section "jafar and its sub-modules.

\subsection subsecLaasCo Check out of your working copy

You first retrieve a version of the jafar backbone:
\verbatim
$ git clone ssh://<user>@trac.laas.fr/git/robots/jafar/jafar
\endverbatim

You will get, among other things, the kernel module in the \c jafar/module/ directory.

\subsection secInstallingModule Installing module
To retrieve the modules versions you are interested in, cd in the module directory and do some checkouts:
\verbatim
$ cd $JAFAR_DIR/modules
$ ../bin/jafar_checkout [modulename]
\endverbatim

The \c jafar_checkout scripts checkout all the required dependencies. And at the end, return you with a list of suggested packages.

If you are using the script from your personnal computer, and that your personnal login is different from the LAAS login, you need to set the environnement variable GIT_LAAS_USER to your LAAS login before using the script.

\subsection subsecLaasCoUp Commit/Update

Please refer to http://gitref.org/  for a complete git documentation. This
section only describes usage of \c jafar_update which can be found in \c
JAFAR_DIR/bin.

Each module is stored in a separate repository, there is no easy way to update
all modules. The script \c jafar_update takes care of that, updating first
jafar-core, then every modules, using git pull --rebase (the rebase option
tries to rebase your change on top of the tree to get a linear history). Note
that git will refuse to pull from remote repository is your repository is not
clean (uncommited changes) : you can use the git stash dance to deal with this
modules.

\subsection subsecLaasSvnModule Adding a new module under git

The \c jafar_add command can be found in \c JAFAR_DIR/bin. This shell script can be used to add a new module under git, or ensure a module is properly set under version control. 

Example:
\verbatim
$ cd /home/toto/jafar/modules
$ jafar_add helloworld
\endverbatim


\section secDaily daily script

The \c daily script in \c jafar/bin is run every night. For a given list of modules, it does the following in \c /usr/local/jafar :
- backup jafar subversion repository to /usr/local/jafar/svn-backup
- update jafar and the modules to the current version,
- generate the documentation,
- launch the \c configure script,
- for each module: clean it, compile lib, generate the tcl module, compile the test suite and run the test suite,
- these operations are logged in /usr/local/jafar/log
- at last the "Jafar daily report" is sent by mail to jafar-source@laas.fr.

In order to add a module to this automatic process, it is necessary to edit \c bin/daily and modify the \c MODULES variable.
\verbatim
# modules to be checked
MODULES="kernel helloworld image display jmath hpm cine model3d stereo filter slam facetsmap"
\endverbatim

\section secLaasLib Installing external libraries

Some of the Jafar modules depend on external libraries. If you are working on the laboratory network, every thing should already be properly installed.

If you miss some dependencies, you can check https://intranet.laas.fr/intranet/robots/wiki/Jafar/Installation2 to get it.

\section secLaasMailingList Mailing list

There are two mailing list related to jafar, both hosted on http://sympa.laas.fr

  - jafar@laas.fr is for discussion about Jafar, 
  - jafar-source@laas.fr distributes commit mails from subversion
  repository,

\section secDistributePackage Distributing Jafar outside LAAS

If you want to distribute jafar outside LAAS. You first need to retrieve the jafar backbone:
\verbatim
$ git clone ssh://<user>@trac.laas.fr//git/robots/jafar/jafar.git
\endverbatim

Then using the \c jafar_checkout script like in \ref secInstallingModule, you retrieve the modules you want to distribute, and the script extract all the dependences you need.

Then you need to remove the git information, as follow:
\verbatim
$ git archive --format=tar HEAD > <module>.tar
\endverbatim
Don't worry about the error message thrown by this command, for some reasons the command try to see if the file is available after you have delete it.

*/

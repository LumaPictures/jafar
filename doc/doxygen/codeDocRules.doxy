/* $Id$ */

/**
\page pageCodeDocRules Code and doc rules

\section secCodeCode Code rules in short

We use \em java like conventions for names of namespace, class,
variable, method, ... For the filenames, we use names starting with a
\em lowercase character, extension for header is \c .hpp and for
source \c .cpp. Makefiles are based on these conventions... 

Do not forget:

    - to protect header files from multiple inclusion using \c #ifndef
    \c MODULE_FILE_HPP
    - to declare your classes and functions in the according namespace
    \c jafar::module

For the C++ \em templates please refer to \ref secCodingTemplate.

\subsection subsecCodeNamespace About namespace

In jafar framework, we assume the name of a module to be unique, but
names of classes or functions do not have to be prefixed by the name of
the module. To avoid names conflicts between modules, we made
extensive use of namespaces:

    - everything that belongs to jafar must be in \c jafar namespace,
    - every module must enclose all its declaration in a \c
jafar::module namespace.

\subsection subsecCodeDocDebug Use of debug message

When you want to have debug messages printed out, you have to put in
your code some (a lot ?!) \c printf() or \c cout \c << protected with
\c #ifndef \c NDEBUG... In Jafar, we strongly recommend to use the
jafar::kernel::JafarDebug throught the \c JFR_DEBUG(message) macro.

And do not forget that some \e debuggers are out there...

\section secCodeDoc Doc rules in short

The documentation is generated by <a href="http://www.doxygen.org">doxygen</a> from:
    - \c .hpp headers in \c include/module, 
    - and from \c .doxy files in \c doc/doxygen. 

Please read doxygen doc FIXME for more information. Doxygen can parse
comments written in the javadoc style, if you already know this syntax
this is fine, but doxygen is a step ahead more powerfull ;-). Jafar
documentation takes advantage of the group feature of doxygen to put
documentaion from the same module together in the same doxygen
group. To achieve this, do not forget to put the \c \\ingroup
command to the comments of your classes or your functions.

The whole doc is generated in the html format using the \e doxygen
command in your \c $JAFAR_DIR. If doxygen is in your path:

\verbatim
$ cd $JAFAR_DIR
$ doxygen
\endverbatim

The configuration file \c Doxyfile will be found automatically. The doc is
generated from the \e installed modules (\ref subsecFrameworkMakefile)
and from jafar documentation in \c $JAFAR_DIR/doc/doxygen.

Also have a look at the command output and please correct errors and
warnings !

\subsection subsecCodeDocErrors Documenting errors

FIXME

\verbatim

\pre \post \invariant \throw

\endverbatim

\subsection subsecCodeDocMacro Documenting TCL macros

All files in \c macro/ must be documented at two level:

  - Each file must be shortly documented so that doxygen includes it
on the module page. This is a bit weird since doxygen cannot really
parse .tcl files, documentation should lay on a single comment line
(to avoid extra \c # in the generated documentation).
  - Each tcl procedure must be documented so that the \c help function
from help.tcl can retrieve a help message. The documentation should
follow the \c proc declaration and can be split on several lines.

An example (from demoHello.tcl):

\verbinclude demoHello.tcl

\section secCodingHeader Header example (.hpp)

From the module helloworld, the class jafar::helloworld::HelloWorld in
the helloWorld.hpp file. Header files must be in the \c include/module/
directory of the module.

\include helloWorld.hpp

\section secCodingSource Source example (.cpp)

The implementation of this class in the file helloWorld.cpp.  Source
files must be in the \c src/ directory of the module.

\include helloWorld.cpp


\section secCodingTemplate About templates

Templates are a special feature of the C++ language which enables \e
generic \e programming. The templates are fully contained in headers
files, which is a problem when distributing your code in binary
form... Compilers developpers are aware of this problem and some
solution should appear to \e hide templates implementation in binary
files. To be ready to use this future feature we split template
declaration and template implementation into two files:

    - template declaration in \e .hpp file
    - template implementation in \e .tpp file

Both files must be located in the \c include/module/ directory of the
module.

\subsection subsecTemplateExample Short example

FIXME example needed

From the module ublas, the template class
jafar::ublas::VectorTools in vector.hpp :



The implementation of this template in vector.tpp:



*/

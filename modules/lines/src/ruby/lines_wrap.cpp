/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif


/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}




/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. */
static VALUE swig_ruby_trackings;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete = 0;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects.  Also make sure to tell
     the garabage collector about the hash table. */
  swig_ruby_trackings = rb_hash_new();
  rb_gc_register_address(&swig_ruby_trackings);
  
  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  unsigned long value = (unsigned long) ptr;
  return LONG2NUM(value);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  unsigned long value = (unsigned long) object;
  return LONG2NUM(value);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* First convert the Ruby number to a C number */
  unsigned long value = NUM2LONG(reference);
  return (VALUE) value;
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    if (sklass->trackObjects) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);

    /* If tracking is on for this class then track this object. */
    if (sklass->trackObjects) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    }
    *ptr = SWIG_TypeCast(tc, vptr);
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CvHistogram swig_types[0]
#define SWIGTYPE_p_CvPoint swig_types[1]
#define SWIGTYPE_p_CvScalar swig_types[2]
#define SWIGTYPE_p_char swig_types[3]
#define SWIGTYPE_p_double swig_types[4]
#define SWIGTYPE_p_int swig_types[5]
#define SWIGTYPE_p_jafar__image__Image swig_types[6]
#define SWIGTYPE_p_jafar__kernel__Exception swig_types[7]
#define SWIGTYPE_p_jafar__kernel__JafarException swig_types[8]
#define SWIGTYPE_p_jafar__lines__CHAINE swig_types[9]
#define SWIGTYPE_p_jafar__lines__ConstPositionKF swig_types[10]
#define SWIGTYPE_p_jafar__lines__ConstVelocityKF swig_types[11]
#define SWIGTYPE_p_jafar__lines__Histogram swig_types[12]
#define SWIGTYPE_p_jafar__lines__IMCT swig_types[13]
#define SWIGTYPE_p_jafar__lines__LineSegment swig_types[14]
#define SWIGTYPE_p_jafar__lines__LineSegmentSet swig_types[15]
#define SWIGTYPE_p_jafar__lines__LinesException swig_types[16]
#define SWIGTYPE_p_jafar__lines__LsExtractor swig_types[17]
#define SWIGTYPE_p_jafar__lines__LsPredictor2D swig_types[18]
#define SWIGTYPE_p_jafar__lines__LsTracker swig_types[19]
#define SWIGTYPE_p_jafar__lines__MatchStatistic swig_types[20]
#define SWIGTYPE_p_jafar__lines__MatchingSet swig_types[21]
#define SWIGTYPE_p_p_jafar__lines__LineSegment swig_types[22]
#define SWIGTYPE_p_short swig_types[23]
#define SWIGTYPE_p_std__vectorTCvPoint_t swig_types[24]
#define SWIGTYPE_p_std__vectorTdouble_t swig_types[25]
#define SWIGTYPE_p_std__vectorTint_t swig_types[26]
#define SWIGTYPE_p_std__vectorTjafar__lines__CHAINE_p_t swig_types[27]
#define SWIGTYPE_p_std__vectorTjafar__lines__LineSegment_t swig_types[28]
#define SWIGTYPE_p_std__vectorTstd__vectorTCvPoint_t_t swig_types[29]
#define SWIGTYPE_p_std__vectorTstd__vectorTint_t_t swig_types[30]
#define SWIGTYPE_p_uint swig_types[31]
static swig_type_info *swig_types[33];
static swig_module_info swig_module = {swig_types, 32, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_lines
#define SWIG_name    "Jafar::Lines"

static VALUE mLines;

#define SWIGVERSION 0x010331 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


/* ruby defines ALLOC which conflicts with boost */ 
#undef ALLOC
  
/* 
   * headers necessary to compile the wrapper
   */

#include "jafarConfig.h"
//#include "image/Image.hpp"
#include "lines/lineSegment.hpp"
#include "lines/lineSegmentSet.hpp"
#include "lines/lsTracker.hpp"
#include "lines/matchingSet.hpp"
#include "lines/ctdef.hpp"
#include "lines/lsMisc.hpp"
#include "lines/histogram.hpp"
#include "lines/lsExtractor.hpp"
#include "lines/lsPredictor2D.hpp"
#include "lines/constPositionKF.hpp"
#include "lines/constVelocityKF.hpp"

// using namespace jafar::lines;



#include <string>


  #include <iostream>
  #include <exception>

  #include "kernel/jafarException.hpp"
  #include "lines/linesException.hpp"


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    


    char *cstr = STR2CSTR(obj);
    
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


    static ID id_to_symbol;


/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = (type == T_FLOAT ? NUM2DBL(obj) : (type == T_FIXNUM ? (double) FIX2INT(obj) : rb_big2dbl(obj)));
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_short (VALUE obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}





SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

swig_class cLinesException;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LinesException_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LinesException_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__LinesException);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LinesException(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LinesException::ExceptionId arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  jafar::lines::LinesException *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::LinesException" "', argument " "1"" of type '" "jafar::lines::LinesException::ExceptionId""'");
  } 
  arg1 = static_cast< jafar::lines::LinesException::ExceptionId >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LinesException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LinesException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::LinesException" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LinesException" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LinesException" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (jafar::lines::LinesException *)new jafar::lines::LinesException(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);DATA_PTR(self) = result;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return self;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_LinesException(jafar::lines::LinesException *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LinesException_getExceptionId(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LinesException *arg1 = (jafar::lines::LinesException *) 0 ;
  jafar::lines::LinesException::ExceptionId result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LinesException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getExceptionId" "', argument " "1"" of type '" "jafar::lines::LinesException const *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LinesException * >(argp1);
  result = (jafar::lines::LinesException::ExceptionId)((jafar::lines::LinesException const *)arg1)->getExceptionId();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



VALUE JafarException_ruby_exception() {
    static VALUE klass_object = Qnil;
    VALUE module_object;
    ID klass_id;

    if (! NIL_P(klass_object))
        return klass_object;

    module_object = rb_define_module("Jafar");
    module_object = rb_define_module_under(module_object,"Kernel");
    klass_id  = rb_intern("Rb""JafarException");
    klass_object  = rb_const_get(module_object, klass_id);
    return klass_object;
}


VALUE Exception_ruby_exception() {
    static VALUE klass_object = Qnil;
    VALUE module_object;
    ID klass_id;

    if (! NIL_P(klass_object))
        return klass_object;

    module_object = rb_define_module("Jafar");
    module_object = rb_define_module_under(module_object,"Kernel");
    klass_id  = rb_intern("Rb""Exception");
    klass_object  = rb_const_get(module_object, klass_id);
    return klass_object;
}


VALUE LinesException_ruby_exception() {
    static VALUE klass_object = Qnil;
    VALUE module_object;
    ID klass_id;

    if (! NIL_P(klass_object))
        return klass_object;

    module_object = rb_define_module("Jafar");
    module_object = rb_define_module_under(module_object,"Lines");
    klass_id  = rb_intern("Rb""LinesException");
    klass_object  = rb_const_get(module_object, klass_id);
    return klass_object;
}

swig_class cLineSegment;

SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::LineSegment *)new jafar::lines::LineSegment();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  jafar::lines::LineSegment *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::LineSegment" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (jafar::lines::LineSegment *)new jafar::lines::LineSegment(arg1);DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LineSegment_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LineSegment_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__LineSegment);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LineSegment__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment" "', argument " "1"" of type '" "jafar::lines::LineSegment const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment" "', argument " "1"" of type '" "jafar::lines::LineSegment const &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (jafar::lines::LineSegment *)new jafar::lines::LineSegment((jafar::lines::LineSegment const &)*arg1);DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_LineSegment(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_LineSegment__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LineSegment__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LineSegment__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_LineSegment'");
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_LineSegment(jafar::lines::LineSegment *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LineSegment_calcSupportingLine(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::calcSupportingLine" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (bool)jafar::lines::LineSegment::calcSupportingLine(arg1,arg2,arg3,arg4,*arg5,*arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_calcEndpointsOfSupportingLine(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::calcEndpointsOfSupportingLine" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  {
    try {
      result = (bool)jafar::lines::LineSegment::calcEndpointsOfSupportingLine(arg1,arg2,arg3,arg4,*arg5,*arg6,*arg7,*arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_mahaDistLines(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::LineSegment::mahaDistLines" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (double)jafar::lines::LineSegment::mahaDistLines(*arg1,*arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_extractGreyscale__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGreyscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGreyscale" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractGreyscale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->extractGreyscale(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_extractGreyscale__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGreyscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGreyscale" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->extractGreyscale(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_extractGreyscale(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_extractGreyscale__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_extractGreyscale__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_extractGreyscale'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_extractGradientscale__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGradientscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGradientscale" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractGradientscale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "extractGradientscale" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->extractGradientscale(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_extractGradientscale__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGradientscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGradientscale" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractGradientscale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->extractGradientscale(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_extractGradientscale(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_extractGradientscale__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegment_extractGradientscale__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_extractGradientscale'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_extractLaplacescale__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractLaplacescale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractLaplacescale" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractLaplacescale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "extractLaplacescale" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->extractLaplacescale(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_extractLaplacescale__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractLaplacescale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractLaplacescale" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractLaplacescale" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->extractLaplacescale(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_extractLaplacescale(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_extractLaplacescale__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegment_extractLaplacescale__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_extractLaplacescale'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_setPoints__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPoints" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setPoints" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setPoints" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setPoints" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "setPoints" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "setPoints" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      (arg1)->setPoints(arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_setPoints__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPoints" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setPoints" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setPoints" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setPoints" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "setPoints" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->setPoints(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_setPoints(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegment_setPoints__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_LineSegment_setPoints__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_setPoints'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_setNumberOfNeighbours(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setNumberOfNeighbours" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setNumberOfNeighbours" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setNumberOfNeighbours(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_assignContourPts(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "assignContourPts" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "assignContourPts" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      result = (double)(arg1)->assignContourPts(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_changePointOrder(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changePointOrder" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      (arg1)->changePointOrder();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_orientLine(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "orientLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "orientLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->orientLine(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_calcHistogramDescriptor__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcHistogramDescriptor" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcHistogramDescriptor" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "calcHistogramDescriptor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->calcHistogramDescriptor(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_calcHistogramDescriptor__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcHistogramDescriptor" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcHistogramDescriptor" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->calcHistogramDescriptor(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_calcHistogramDescriptor__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcHistogramDescriptor" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      (arg1)->calcHistogramDescriptor();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_calcHistogramDescriptor(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LineSegment_calcHistogramDescriptor__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_calcHistogramDescriptor__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_calcHistogramDescriptor__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_calcHistogramDescriptor'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_calcGreyspaceDescriptor(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcGreyspaceDescriptor" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcGreyspaceDescriptor" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->calcGreyspaceDescriptor(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_compareGreyspace(int argc, VALUE *argv, VALUE self) {
  std::vector<int > *arg1 = 0 ;
  std::vector<int > *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__vectorTint_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::compareGreyspace" "', argument " "1"" of type '" "std::vector<int > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::compareGreyspace" "', argument " "1"" of type '" "std::vector<int > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::compareGreyspace" "', argument " "2"" of type '" "std::vector<int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::compareGreyspace" "', argument " "2"" of type '" "std::vector<int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<int > * >(argp2);
  {
    try {
      result = (double)jafar::lines::LineSegment::compareGreyspace(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_compareAvLR(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::compareAvLR" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::compareAvLR" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::compareAvLR" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::compareAvLR" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  {
    try {
      result = (double)jafar::lines::LineSegment::compareAvLR(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLine__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLine" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fitLine" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  {
    try {
      result = (bool)(arg1)->fitLine(arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLine__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLine" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (bool)(arg1)->fitLine(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLine__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (bool)(arg1)->fitLine(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLine__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(arg1)->fitLine(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLine__SWIG_4(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      result = (bool)(arg1)->fitLine(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_fitLine(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_fitLine__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_fitLine__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegment_fitLine__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegment_fitLine__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_LineSegment_fitLine__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_fitLine'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineCandidates(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  std::vector<CvPoint > *arg4 = 0 ;
  std::vector<CvPoint > *arg5 = 0 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  jafar::image::Image *arg9 = (jafar::image::Image *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineCandidates" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineCandidates" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLineCandidates" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_std__vectorTCvPoint_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineCandidates" "', argument " "4"" of type '" "std::vector<CvPoint > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineCandidates" "', argument " "4"" of type '" "std::vector<CvPoint > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<CvPoint > * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_std__vectorTCvPoint_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fitLineCandidates" "', argument " "5"" of type '" "std::vector<CvPoint > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineCandidates" "', argument " "5"" of type '" "std::vector<CvPoint > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector<CvPoint > * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLineCandidates" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLineCandidates" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fitLineCandidates" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_ConvertPtr(argv[7], &argp9,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "fitLineCandidates" "', argument " "9"" of type '" "jafar::image::Image *""'"); 
  }
  arg9 = reinterpret_cast< jafar::image::Image * >(argp9);
  {
    try {
      result = (int)(arg1)->fitLineCandidates(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8,arg9);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineOrientation__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  jafar::image::Image *arg10 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLineOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLineOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLineOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLineOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fitLineOrientation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fitLineOrientation" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  res10 = SWIG_ConvertPtr(argv[8], &argp10,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fitLineOrientation" "', argument " "10"" of type '" "jafar::image::Image *""'"); 
  }
  arg10 = reinterpret_cast< jafar::image::Image * >(argp10);
  {
    try {
      result = (bool)(arg1)->fitLineOrientation(*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineOrientation__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLineOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLineOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLineOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLineOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fitLineOrientation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fitLineOrientation" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      result = (bool)(arg1)->fitLineOrientation(*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineOrientation__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLineOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLineOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLineOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLineOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fitLineOrientation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (bool)(arg1)->fitLineOrientation(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineOrientation__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLineOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLineOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLineOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLineOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (bool)(arg1)->fitLineOrientation(*arg2,arg3,arg4,arg5,arg6,arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineOrientation__SWIG_4(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLineOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLineOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLineOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (bool)(arg1)->fitLineOrientation(*arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineOrientation__SWIG_5(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLineOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLineOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (bool)(arg1)->fitLineOrientation(*arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_fitLineOrientation__SWIG_6(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLineOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLineOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLineOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLineOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  {
    try {
      result = (bool)(arg1)->fitLineOrientation(*arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_fitLineOrientation(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LineSegment_fitLineOrientation__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegment_fitLineOrientation__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_LineSegment_fitLineOrientation__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_LineSegment_fitLineOrientation__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_LineSegment_fitLineOrientation__SWIG_2(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_LineSegment_fitLineOrientation__SWIG_1(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_LineSegment_fitLineOrientation__SWIG_0(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_fitLineOrientation'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_searchGradMax(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  CvPoint arg2 ;
  CvPoint arg3 ;
  std::vector<CvPoint > *arg4 = 0 ;
  std::vector<double > *arg5 = 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg7 = (jafar::image::Image *) 0 ;
  int arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "searchGradMax" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "searchGradMax" "', argument " "2"" of type '" "CvPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "searchGradMax" "', argument " "2"" of type '" "CvPoint""'");
    } else {
      arg2 = *(reinterpret_cast< CvPoint * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "searchGradMax" "', argument " "3"" of type '" "CvPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "searchGradMax" "', argument " "3"" of type '" "CvPoint""'");
    } else {
      arg3 = *(reinterpret_cast< CvPoint * >(argp3));
    }
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_std__vectorTCvPoint_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "searchGradMax" "', argument " "4"" of type '" "std::vector<CvPoint > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "searchGradMax" "', argument " "4"" of type '" "std::vector<CvPoint > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<CvPoint > * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_std__vectorTdouble_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "searchGradMax" "', argument " "5"" of type '" "std::vector<double > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "searchGradMax" "', argument " "5"" of type '" "std::vector<double > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector<double > * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "searchGradMax" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "searchGradMax" "', argument " "7"" of type '" "jafar::image::Image *""'"); 
  }
  arg7 = reinterpret_cast< jafar::image::Image * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "searchGradMax" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "searchGradMax" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      (arg1)->searchGradMax(arg2,arg3,*arg4,*arg5,arg6,arg7,arg8,arg9);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_interpolateLineRansac(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  SwigValueWrapper<std::vector<jafar::lines::LineSegment > > arg2 ;
  std::vector<CvPoint > *arg3 = 0 ;
  std::vector<double > *arg4 = 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  int arg7 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  jafar::image::Image *arg11 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  
  if ((argc < 10) || (argc > 10)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 10)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolateLineRansac" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTjafar__lines__LineSegment_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolateLineRansac" "', argument " "2"" of type '" "std::vector<jafar::lines::LineSegment >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateLineRansac" "', argument " "2"" of type '" "std::vector<jafar::lines::LineSegment >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<jafar::lines::LineSegment > * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorTCvPoint_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolateLineRansac" "', argument " "3"" of type '" "std::vector<CvPoint > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateLineRansac" "', argument " "3"" of type '" "std::vector<CvPoint > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector<CvPoint > * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_std__vectorTdouble_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "interpolateLineRansac" "', argument " "4"" of type '" "std::vector<double > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateLineRansac" "', argument " "4"" of type '" "std::vector<double > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<double > * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "interpolateLineRansac" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "interpolateLineRansac" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "interpolateLineRansac" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "interpolateLineRansac" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "interpolateLineRansac" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(argv[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "interpolateLineRansac" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  res11 = SWIG_ConvertPtr(argv[9], &argp11,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "interpolateLineRansac" "', argument " "11"" of type '" "jafar::image::Image *""'"); 
  }
  arg11 = reinterpret_cast< jafar::image::Image * >(argp11);
  {
    try {
      (arg1)->interpolateLineRansac(arg2,*arg3,*arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_interpolateLineGrowline(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<jafar::lines::LineSegment > *arg2 = 0 ;
  std::vector<CvPoint > *arg3 = 0 ;
  std::vector<double > *arg4 = 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  int arg7 ;
  double arg8 ;
  double arg9 ;
  jafar::image::Image *arg10 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolateLineGrowline" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTjafar__lines__LineSegment_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolateLineGrowline" "', argument " "2"" of type '" "std::vector<jafar::lines::LineSegment > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateLineGrowline" "', argument " "2"" of type '" "std::vector<jafar::lines::LineSegment > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<jafar::lines::LineSegment > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorTCvPoint_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolateLineGrowline" "', argument " "3"" of type '" "std::vector<CvPoint > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateLineGrowline" "', argument " "3"" of type '" "std::vector<CvPoint > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector<CvPoint > * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_std__vectorTdouble_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "interpolateLineGrowline" "', argument " "4"" of type '" "std::vector<double > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolateLineGrowline" "', argument " "4"" of type '" "std::vector<double > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<double > * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "interpolateLineGrowline" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "interpolateLineGrowline" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "interpolateLineGrowline" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "interpolateLineGrowline" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "interpolateLineGrowline" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  res10 = SWIG_ConvertPtr(argv[8], &argp10,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "interpolateLineGrowline" "', argument " "10"" of type '" "jafar::image::Image *""'"); 
  }
  arg10 = reinterpret_cast< jafar::image::Image * >(argp10);
  {
    try {
      (arg1)->interpolateLineGrowline(*arg2,*arg3,*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_tryMergeLinesChiSq__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  double arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)jafar::lines::LineSegment::tryMergeLinesChiSq(*arg1,*arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_tryMergeLinesChiSq__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::tryMergeLinesChiSq" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  {
    try {
      result = (int)jafar::lines::LineSegment::tryMergeLinesChiSq(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_tryMergeLinesChiSq(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_tryMergeLinesChiSq__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_tryMergeLinesChiSq__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_tryMergeLinesChiSq'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_mergeLinesProb(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::mergeLinesProb" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::mergeLinesProb" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::mergeLinesProb" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::mergeLinesProb" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  {
    try {
      jafar::lines::LineSegment::mergeLinesProb(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_mergeLinesEP(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::mergeLinesEP" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::mergeLinesEP" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::mergeLinesEP" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::mergeLinesEP" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  {
    try {
      result = (int)jafar::lines::LineSegment::mergeLinesEP(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_sizeOfGap(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegment::sizeOfGap" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::sizeOfGap" "', argument " "1"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegment::sizeOfGap" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegment::sizeOfGap" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  {
    try {
      result = (double)jafar::lines::LineSegment::sizeOfGap(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getEPPredictionByRhoThetaPrediction(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(argv[7], &argp9, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "9"" of type '" "double &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getEPPredictionByRhoThetaPrediction" "', argument " "9"" of type '" "double &""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      result = (double)(arg1)->getEPPredictionByRhoThetaPrediction(arg2,arg3,arg4,arg5,*arg6,*arg7,*arg8,*arg9);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLineParallel__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLineParallel" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLineParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLineParallel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLineParallel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "growLineParallel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (bool)(arg1)->growLineParallel(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLineParallel__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLineParallel" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLineParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLineParallel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLineParallel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (bool)(arg1)->growLineParallel(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLineParallel__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLineParallel" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLineParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLineParallel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(arg1)->growLineParallel(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLineParallel__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLineParallel" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLineParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      result = (bool)(arg1)->growLineParallel(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_growLineParallel(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_growLineParallel__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_growLineParallel__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegment_growLineParallel__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegment_growLineParallel__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_growLineParallel'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLine__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "growLine" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (bool)(arg1)->growLine(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLine__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (bool)(arg1)->growLine(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLine__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLine" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(arg1)->growLine(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_growLine__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      result = (bool)(arg1)->growLine(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_growLine(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegment_growLine__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegment_growLine__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegment_growLine__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegment_growLine__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_growLine'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_drawLine__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  CvScalar arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "drawLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "drawLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CvScalar,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "drawLine" "', argument " "3"" of type '" "CvScalar""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "drawLine" "', argument " "3"" of type '" "CvScalar""'");
    } else {
      arg3 = *(reinterpret_cast< CvScalar * >(argp3));
    }
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "drawLine" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->drawLine(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_drawLine__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  CvScalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "drawLine" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "drawLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_CvScalar,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "drawLine" "', argument " "3"" of type '" "CvScalar""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "drawLine" "', argument " "3"" of type '" "CvScalar""'");
    } else {
      arg3 = *(reinterpret_cast< CvScalar * >(argp3));
    }
  }
  {
    try {
      (arg1)->drawLine(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegment_drawLine(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CvScalar, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LineSegment_drawLine__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CvScalar, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegment_drawLine__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegment_drawLine'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getX1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getX1" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getX1();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getY1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getY1" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getY1();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getX2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getX2" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getX2();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getY2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getY2" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getY2();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getMx(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMx" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getMx();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getMy(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMy" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getMy();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getAlpha(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAlpha" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getAlpha();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getOAlpha(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getOAlpha" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getOAlpha();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_getEucLength(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getEucLength" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (double)(arg1)->getEucLength();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_isValid(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isValid" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      result = (bool)(arg1)->isValid();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_setValid(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setValid" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      (arg1)->setValid();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_setInvalid(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setInvalid" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    try {
      (arg1)->setInvalid();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_length_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "length" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "length" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->length = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_length_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "length" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (int) ((arg1)->length);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_color_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  CvScalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "color" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_CvScalar,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "color" "', argument " "2"" of type '" "CvScalar""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "color" "', argument " "2"" of type '" "CvScalar""'");
    } else {
      arg2 = *(reinterpret_cast< CvScalar * >(argp2));
    }
  }
  if (arg1) (arg1)->color = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_color_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  CvScalar result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "color" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->color);
  vresult = SWIG_NewPointerObj((new CvScalar(static_cast< const CvScalar& >(result))), SWIGTYPE_p_CvScalar, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyscale_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "greyscale" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "greyscale" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->greyscale = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyscale_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->greyscale);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_gradientscale_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradientscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gradientscale" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradientscale" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->gradientscale = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_gradientscale_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradientscale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->gradientscale);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_laplacescale_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "laplacescale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "laplacescale" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "laplacescale" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->laplacescale = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_laplacescale_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "laplacescale" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->laplacescale);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_numberOfNeighbours_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "numberOfNeighbours" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "numberOfNeighbours" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->numberOfNeighbours = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_numberOfNeighbours_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "numberOfNeighbours" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (int) ((arg1)->numberOfNeighbours);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_parallels_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegment **arg2 = (jafar::lines::LineSegment **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parallels" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parallels" "', argument " "2"" of type '" "jafar::lines::LineSegment **""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment ** >(argp2);
  if (arg1) (arg1)->parallels = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_parallels_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LineSegment **result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parallels" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (jafar::lines::LineSegment **) ((arg1)->parallels);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_jafar__lines__LineSegment, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_histogramB_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::Histogram *arg2 = (jafar::lines::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "histogramB" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__lines__Histogram, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "histogramB" "', argument " "2"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::Histogram * >(argp2);
  if (arg1) (arg1)->histogramB = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_histogramB_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::Histogram *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "histogramB" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (jafar::lines::Histogram *) ((arg1)->histogramB);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_histogramD_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::Histogram *arg2 = (jafar::lines::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "histogramD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__lines__Histogram, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "histogramD" "', argument " "2"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::Histogram * >(argp2);
  if (arg1) (arg1)->histogramD = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_histogramD_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::Histogram *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "histogramD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (jafar::lines::Histogram *) ((arg1)->histogramD);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyspace_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyspace" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "greyspace" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "greyspace" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->greyspace = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyspace_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyspace" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->greyspace);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyspaceL_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyspaceL" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "greyspaceL" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "greyspaceL" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->greyspaceL = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyspaceL_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyspaceL" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->greyspaceL);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyspaceR_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyspaceR" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "greyspaceR" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "greyspaceR" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->greyspaceR = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_greyspaceR_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "greyspaceR" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->greyspaceR);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_avL_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avL" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avL" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->avL = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_avL_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avL" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->avL);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_avR_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avR" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "avR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->avR = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_avR_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avR" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->avR);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_varL_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varL" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "varL" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->varL = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_varL_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varL" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->varL);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_varR_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varR" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "varR" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->varR = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_varR_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "varR" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->varR);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_polarD_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polarD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->polarD = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_polarD_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->polarD);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_polarAlpha_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarAlpha" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polarAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->polarAlpha = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_polarAlpha_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polarAlpha" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->polarAlpha);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covDD_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covDD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covDD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covDD = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covDD_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covDD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covDD);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covAA_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covAA" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covAA" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covAA = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covAA_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covAA" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covAA);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covAD_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covAD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covAD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covAD = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covAD_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covAD" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covAD);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXX_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXX" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covXX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covXX = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXX_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXX" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covXX);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXY_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXY" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covXY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covXY = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXY_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXY" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covXY);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYY_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYY" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covYY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covYY = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYY_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYY" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covYY);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covAlpha_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covAlpha" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covAlpha = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covAlpha_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covAlpha" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covAlpha);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXA_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXA" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covXA" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covXA = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXA_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXA" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covXA);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYA_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYA" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covYA" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covYA = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYA_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYA" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covYA);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXX_M_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXX_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covXX_M" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covXX_M = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXX_M_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXX_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covXX_M);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXY_M_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXY_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covXY_M" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covXY_M = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXY_M_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXY_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covXY_M);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYY_M_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYY_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covYY_M" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covYY_M = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYY_M_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYY_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covYY_M);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXA_M_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXA_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covXA_M" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covXA_M = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covXA_M_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covXA_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covXA_M);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYA_M_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYA_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covYA_M" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covYA_M = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covYA_M_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covYA_M" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covYA_M);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_u_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "u" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "u" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->u = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_u_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "u" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->u);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_v_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "v" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->v = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_v_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->v);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_id_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "id" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "id" "', argument " "2"" of type '" "uint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "id" "', argument " "2"" of type '" "uint""'");
    } else {
      arg2 = *(reinterpret_cast< uint * >(argp2));
    }
  }
  if (arg1) (arg1)->id = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_id_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "id" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->id);
  vresult = SWIG_NewPointerObj((new uint(static_cast< const uint& >(result))), SWIGTYPE_p_uint, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_contourPoints_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<std::vector<CvPoint > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contourPoints" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTstd__vectorTCvPoint_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "contourPoints" "', argument " "2"" of type '" "std::vector<std::vector<CvPoint > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "contourPoints" "', argument " "2"" of type '" "std::vector<std::vector<CvPoint > >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<std::vector<CvPoint > > * >(argp2));
    }
  }
  if (arg1) (arg1)->contourPoints = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_contourPoints_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<std::vector<CvPoint > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contourPoints" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->contourPoints);
  vresult = SWIG_NewPointerObj((new std::vector<std::vector<CvPoint > >(static_cast< const std::vector<std::vector<CvPoint > >& >(result))), SWIGTYPE_p_std__vectorTstd__vectorTCvPoint_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_param1_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param1" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "param1" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->param1 = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_param1_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param1" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (int) ((arg1)->param1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_parameters_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parameters" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parameters" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->parameters = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_parameters_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result =  ((arg1)->parameters);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_predictor_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LsPredictor2D *arg2 = (jafar::lines::LsPredictor2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predictor" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "predictor" "', argument " "2"" of type '" "jafar::lines::LsPredictor2D *""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LsPredictor2D * >(argp2);
  if (arg1) (arg1)->predictor = *arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_predictor_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  jafar::lines::LsPredictor2D *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predictor" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (jafar::lines::LsPredictor2D *)& ((arg1)->predictor);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_setPrediction(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPrediction" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setPrediction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setPrediction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setPrediction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "setPrediction" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "setPrediction" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->setPrediction(arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_rhoPred_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rhoPred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rhoPred" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->rhoPred = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_rhoPred_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rhoPred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->rhoPred);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_thetaPred_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "thetaPred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "thetaPred" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->thetaPred = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_thetaPred_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "thetaPred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->thetaPred);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covRRpred_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covRRpred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covRRpred" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covRRpred = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covRRpred_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covRRpred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covRRpred);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covRTpred_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covRTpred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covRTpred" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covRTpred = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covRTpred_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covRTpred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covRTpred);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covTTpred_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covTTpred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "covTTpred" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->covTTpred = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_covTTpred_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "covTTpred" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (double) ((arg1)->covTTpred);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_predFlag_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predFlag" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "predFlag" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->predFlag = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegment_predFlag_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegment *arg1 = (jafar::lines::LineSegment *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predFlag" "', argument " "1"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegment * >(argp1);
  result = (bool) ((arg1)->predFlag);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cLineSegmentSet;

SWIGINTERN VALUE
_wrap_LineSegmentSet_eraseInvalid(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eraseInvalid" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    try {
      result = (int)(arg1)->eraseInvalid();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_clearPredFlags(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clearPredFlags" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    try {
      (arg1)->clearPredFlags();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_clearParameters(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clearParameters" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    try {
      (arg1)->clearParameters();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_addLine__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegment *arg2 = (jafar::lines::LineSegment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addLine" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addLine" "', argument " "2"" of type '" "jafar::lines::LineSegment *""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  {
    try {
      (arg1)->addLine(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_addLine__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addLine" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegment,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addLine" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addLine" "', argument " "2"" of type '" "jafar::lines::LineSegment &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegment * >(argp2);
  {
    try {
      (arg1)->addLine(*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_addLine(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegmentSet_addLine__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegmentSet_addLine__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_addLine'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_clear(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_print(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    try {
      (arg1)->print();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_extractGreyscales__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGreyscales" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGreyscales" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractGreyscales" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->extractGreyscales(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_extractGreyscales__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGreyscales" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGreyscales" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->extractGreyscales(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_extractGreyscales(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegmentSet_extractGreyscales__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegmentSet_extractGreyscales__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_extractGreyscales'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_extractGradientscales__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGradientscales" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGradientscales" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractGradientscales" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "extractGradientscales" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->extractGradientscales(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_extractGradientscales__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractGradientscales" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractGradientscales" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractGradientscales" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->extractGradientscales(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_extractGradientscales(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegmentSet_extractGradientscales__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegmentSet_extractGradientscales__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_extractGradientscales'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_extractLaplacescales__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractLaplacescales" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractLaplacescales" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractLaplacescales" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "extractLaplacescales" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->extractLaplacescales(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_extractLaplacescales__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractLaplacescales" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractLaplacescales" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extractLaplacescales" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->extractLaplacescales(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_extractLaplacescales(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegmentSet_extractLaplacescales__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegmentSet_extractLaplacescales__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_extractLaplacescales'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_changeNumberOfNeighbours(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeNumberOfNeighbours" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "changeNumberOfNeighbours" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->changeNumberOfNeighbours(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_calcHistogramDescriptor__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcHistogramDescriptor" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcHistogramDescriptor" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->calcHistogramDescriptor(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_calcHistogramDescriptor__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcHistogramDescriptor" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    try {
      (arg1)->calcHistogramDescriptor();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_calcHistogramDescriptor(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LineSegmentSet_calcHistogramDescriptor__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegmentSet_calcHistogramDescriptor__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_calcHistogramDescriptor'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_calcGreyspaceDescriptor(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "calcGreyspaceDescriptor" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "calcGreyspaceDescriptor" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->calcGreyspaceDescriptor(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_orientLines(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "orientLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "orientLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->orientLines(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLinesParallel__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLinesParallel" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLinesParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLinesParallel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLinesParallel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "growLinesParallel" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (arg1)->growLinesParallel(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLinesParallel__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLinesParallel" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLinesParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLinesParallel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLinesParallel" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->growLinesParallel(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLinesParallel__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLinesParallel" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLinesParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLinesParallel" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->growLinesParallel(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLinesParallel__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLinesParallel" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLinesParallel" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->growLinesParallel(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_growLinesParallel(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegmentSet_growLinesParallel__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegmentSet_growLinesParallel__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegmentSet_growLinesParallel__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegmentSet_growLinesParallel__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_growLinesParallel'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLines__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLines" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "growLines" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (arg1)->growLines(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLines__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "growLines" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->growLines(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLines__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "growLines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->growLines(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_growLines__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "growLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "growLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->growLines(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_growLines(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegmentSet_growLines__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegmentSet_growLines__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegmentSet_growLines__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegmentSet_growLines__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_growLines'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLines__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitLines" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLines" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "fitLines" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  {
    try {
      (arg1)->fitLines(arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLines__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitLines" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLines" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (arg1)->fitLines(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLines__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fitLines" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->fitLines(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLines__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fitLines" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->fitLines(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLines__SWIG_4(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLines" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLines" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->fitLines(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_fitLines(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LineSegmentSet_fitLines__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LineSegmentSet_fitLines__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LineSegmentSet_fitLines__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegmentSet_fitLines__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_LineSegmentSet_fitLines__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_fitLines'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLinesOrientation__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet arg2 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  jafar::image::Image *arg10 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLinesOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'");
    } else {
      arg2 = *(reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLinesOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLinesOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLinesOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLinesOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLinesOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fitLinesOrientation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fitLinesOrientation" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  res10 = SWIG_ConvertPtr(argv[8], &argp10,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fitLinesOrientation" "', argument " "10"" of type '" "jafar::image::Image *""'"); 
  }
  arg10 = reinterpret_cast< jafar::image::Image * >(argp10);
  {
    try {
      (arg1)->fitLinesOrientation(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLinesOrientation__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet arg2 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLinesOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'");
    } else {
      arg2 = *(reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLinesOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLinesOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLinesOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLinesOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLinesOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fitLinesOrientation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "fitLinesOrientation" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      (arg1)->fitLinesOrientation(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLinesOrientation__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet arg2 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLinesOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'");
    } else {
      arg2 = *(reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLinesOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLinesOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLinesOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLinesOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLinesOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "fitLinesOrientation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      (arg1)->fitLinesOrientation(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLinesOrientation__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet arg2 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLinesOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'");
    } else {
      arg2 = *(reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLinesOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLinesOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLinesOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLinesOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fitLinesOrientation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      (arg1)->fitLinesOrientation(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLinesOrientation__SWIG_4(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet arg2 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLinesOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'");
    } else {
      arg2 = *(reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLinesOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLinesOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLinesOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fitLinesOrientation" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      (arg1)->fitLinesOrientation(arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLinesOrientation__SWIG_5(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet arg2 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLinesOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'");
    } else {
      arg2 = *(reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLinesOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLinesOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fitLinesOrientation" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (arg1)->fitLinesOrientation(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_fitLinesOrientation__SWIG_6(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet arg2 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fitLinesOrientation" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fitLinesOrientation" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet""'");
    } else {
      arg2 = *(reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fitLinesOrientation" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fitLinesOrientation" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  {
    try {
      (arg1)->fitLinesOrientation(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LineSegmentSet_fitLinesOrientation(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LineSegmentSet_fitLinesOrientation__SWIG_6(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LineSegmentSet_fitLinesOrientation__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_LineSegmentSet_fitLinesOrientation__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_LineSegmentSet_fitLinesOrientation__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_LineSegmentSet_fitLinesOrientation__SWIG_2(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_LineSegmentSet_fitLinesOrientation__SWIG_1(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        return _wrap_LineSegmentSet_fitLinesOrientation__SWIG_0(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LineSegmentSet_fitLinesOrientation'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_clone(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LineSegmentSet::clone" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegmentSet::clone" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LineSegmentSet::clone" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LineSegmentSet::clone" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  {
    try {
      jafar::lines::LineSegmentSet::clone(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_lineSegments_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  std::vector<jafar::lines::LineSegment > *arg2 = (std::vector<jafar::lines::LineSegment > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lineSegments" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorTjafar__lines__LineSegment_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lineSegments" "', argument " "2"" of type '" "std::vector<jafar::lines::LineSegment > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector<jafar::lines::LineSegment > * >(argp2);
  if (arg1) (arg1)->lineSegments = *arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_lineSegments_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  std::vector<jafar::lines::LineSegment > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lineSegments" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  result = (std::vector<jafar::lines::LineSegment > *)& ((arg1)->lineSegments);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTjafar__lines__LineSegment_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_size(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    try {
      result = (arg1)->size();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_NewPointerObj((new uint(static_cast< const uint& >(result))), SWIGTYPE_p_uint, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LineSegmentSet_ls(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *arg1 = (jafar::lines::LineSegmentSet *) 0 ;
  uint arg2 ;
  jafar::lines::LineSegment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ls" "', argument " "1"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ls" "', argument " "2"" of type '" "uint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ls" "', argument " "2"" of type '" "uint""'");
    } else {
      arg2 = *(reinterpret_cast< uint * >(argp2));
    }
  }
  {
    try {
      {
        jafar::lines::LineSegment &_result_ref = (arg1)->ls(arg2);
        result = (jafar::lines::LineSegment *) &_result_ref;
      }
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_jafar__lines__LineSegment, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LineSegmentSet_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LineSegmentSet_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__LineSegmentSet);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LineSegmentSet(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LineSegmentSet *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::LineSegmentSet *)new jafar::lines::LineSegmentSet();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_LineSegmentSet(jafar::lines::LineSegmentSet *arg1) {
    delete arg1;
}

swig_class cLsTracker;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LsTracker_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LsTracker_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__LsTracker);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LsTracker(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::LsTracker *)new jafar::lines::LsTracker();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_LsTracker(jafar::lines::LsTracker *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LsTracker_procTracking__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet *arg4 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::MatchingSet *arg5 = (jafar::lines::MatchingSet *) 0 ;
  jafar::lines::TrackScheme arg6 ;
  jafar::image::Image *arg7 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procTracking" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procTracking" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procTracking" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "procTracking" "', argument " "4"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg4 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "procTracking" "', argument " "5"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg5 = reinterpret_cast< jafar::lines::MatchingSet * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "procTracking" "', argument " "6"" of type '" "jafar::lines::TrackScheme""'");
  } 
  arg6 = static_cast< jafar::lines::TrackScheme >(val6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "procTracking" "', argument " "7"" of type '" "jafar::image::Image *""'"); 
  }
  arg7 = reinterpret_cast< jafar::image::Image * >(argp7);
  {
    try {
      (arg1)->procTracking(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_procTracking__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet *arg4 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::MatchingSet *arg5 = (jafar::lines::MatchingSet *) 0 ;
  jafar::lines::TrackScheme arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procTracking" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procTracking" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procTracking" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "procTracking" "', argument " "4"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg4 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "procTracking" "', argument " "5"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg5 = reinterpret_cast< jafar::lines::MatchingSet * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "procTracking" "', argument " "6"" of type '" "jafar::lines::TrackScheme""'");
  } 
  arg6 = static_cast< jafar::lines::TrackScheme >(val6);
  {
    try {
      (arg1)->procTracking(arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_procTracking__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::LineSegmentSet *arg4 = (jafar::lines::LineSegmentSet *) 0 ;
  jafar::lines::MatchingSet *arg5 = (jafar::lines::MatchingSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procTracking" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procTracking" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procTracking" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__lines__LineSegmentSet, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "procTracking" "', argument " "4"" of type '" "jafar::lines::LineSegmentSet *""'"); 
  }
  arg4 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "procTracking" "', argument " "5"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg5 = reinterpret_cast< jafar::lines::MatchingSet * >(argp5);
  {
    try {
      (arg1)->procTracking(arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsTracker_procTracking(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_LsTracker_procTracking__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_LsTracker_procTracking__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_LsTracker_procTracking__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsTracker_procTracking'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme6__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  jafar::image::Image *arg8 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme6" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme6" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme6" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme6" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme6" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme6" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme6" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme6" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme6" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme6" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "trackingScheme6" "', argument " "8"" of type '" "jafar::image::Image *""'"); 
  }
  arg8 = reinterpret_cast< jafar::image::Image * >(argp8);
  {
    try {
      (arg1)->trackingScheme6(*arg2,*arg3,arg4,arg5,arg6,*arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme6__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme6" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme6" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme6" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme6" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme6" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme6" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme6" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme6" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme6" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme6" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  {
    try {
      (arg1)->trackingScheme6(*arg2,*arg3,arg4,arg5,arg6,*arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsTracker_trackingScheme6(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_LsTracker_trackingScheme6__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_LsTracker_trackingScheme6__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsTracker_trackingScheme6'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme5__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  jafar::image::Image *arg8 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme5" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme5" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme5" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme5" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme5" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme5" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme5" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme5" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme5" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme5" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "trackingScheme5" "', argument " "8"" of type '" "jafar::image::Image *""'"); 
  }
  arg8 = reinterpret_cast< jafar::image::Image * >(argp8);
  {
    try {
      (arg1)->trackingScheme5(*arg2,*arg3,arg4,arg5,arg6,*arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme5__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme5" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme5" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme5" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme5" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme5" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme5" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme5" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme5" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme5" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme5" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  {
    try {
      (arg1)->trackingScheme5(*arg2,*arg3,arg4,arg5,arg6,*arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsTracker_trackingScheme5(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_LsTracker_trackingScheme5__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_LsTracker_trackingScheme5__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsTracker_trackingScheme5'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme4__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  jafar::image::Image *arg8 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme4" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme4" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme4" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme4" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme4" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme4" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme4" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme4" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme4" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme4" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "trackingScheme4" "', argument " "8"" of type '" "jafar::image::Image *""'"); 
  }
  arg8 = reinterpret_cast< jafar::image::Image * >(argp8);
  {
    try {
      (arg1)->trackingScheme4(*arg2,*arg3,arg4,arg5,arg6,*arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme4__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme4" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme4" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme4" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme4" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme4" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme4" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme4" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme4" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme4" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme4" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  {
    try {
      (arg1)->trackingScheme4(*arg2,*arg3,arg4,arg5,arg6,*arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsTracker_trackingScheme4(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_LsTracker_trackingScheme4__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_LsTracker_trackingScheme4__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsTracker_trackingScheme4'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  jafar::image::Image *arg8 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme3" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme3" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme3" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme3" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme3" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme3" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme3" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme3" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme3" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme3" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "trackingScheme3" "', argument " "8"" of type '" "jafar::image::Image *""'"); 
  }
  arg8 = reinterpret_cast< jafar::image::Image * >(argp8);
  {
    try {
      (arg1)->trackingScheme3(*arg2,*arg3,arg4,arg5,arg6,*arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme3" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme3" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme3" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme3" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme3" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme3" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme3" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme3" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme3" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme3" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  {
    try {
      (arg1)->trackingScheme3(*arg2,*arg3,arg4,arg5,arg6,*arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsTracker_trackingScheme3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_LsTracker_trackingScheme3__SWIG_1(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsTracker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_jafar__lines__MatchingSet, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_LsTracker_trackingScheme3__SWIG_0(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsTracker_trackingScheme3'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg5 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg6 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme2" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme2" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme2" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme2" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme2" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme2" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme2" "', argument " "5"" of type '" "jafar::image::Image *""'"); 
  }
  arg5 = reinterpret_cast< jafar::image::Image * >(argp5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "trackingScheme2" "', argument " "6"" of type '" "jafar::image::Image *""'"); 
  }
  arg6 = reinterpret_cast< jafar::image::Image * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "trackingScheme2" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme2" "', argument " "7"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg7 = reinterpret_cast< jafar::lines::MatchingSet * >(argp7);
  {
    try {
      (arg1)->trackingScheme2(*arg2,*arg3,arg4,arg5,arg6,*arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_trackingScheme1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  jafar::image::Image *arg4 = (jafar::image::Image *) 0 ;
  jafar::lines::MatchingSet *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trackingScheme1" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trackingScheme1" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme1" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trackingScheme1" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme1" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trackingScheme1" "', argument " "4"" of type '" "jafar::image::Image *""'"); 
  }
  arg4 = reinterpret_cast< jafar::image::Image * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "trackingScheme1" "', argument " "5"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trackingScheme1" "', argument " "5"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg5 = reinterpret_cast< jafar::lines::MatchingSet * >(argp5);
  {
    try {
      (arg1)->trackingScheme1(*arg2,*arg3,arg4,*arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_setCannyPara(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setCannyPara" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setCannyPara" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setCannyPara" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setCannyPara" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setCannyPara(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_setNextId(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setNextId" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setNextId" "', argument " "2"" of type '" "uint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setNextId" "', argument " "2"" of type '" "uint""'");
    } else {
      arg2 = *(reinterpret_cast< uint * >(argp2));
    }
  }
  {
    try {
      (arg1)->setNextId(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsTracker_setMinLength(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsTracker *arg1 = (jafar::lines::LsTracker *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsTracker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setMinLength" "', argument " "1"" of type '" "jafar::lines::LsTracker *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsTracker * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setMinLength" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setMinLength(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cMatchStatistic;

SWIGINTERN VALUE
_wrap_MatchStatistic_right_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *arg1 = (jafar::lines::MatchStatistic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "right" "', argument " "1"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "right" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->right = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchStatistic_right_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *arg1 = (jafar::lines::MatchStatistic *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "right" "', argument " "1"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp1);
  result = (int) ((arg1)->right);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchStatistic_wrong_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *arg1 = (jafar::lines::MatchStatistic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wrong" "', argument " "1"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "wrong" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->wrong = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchStatistic_wrong_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *arg1 = (jafar::lines::MatchStatistic *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "wrong" "', argument " "1"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp1);
  result = (int) ((arg1)->wrong);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchStatistic_notFound_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *arg1 = (jafar::lines::MatchStatistic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "notFound" "', argument " "1"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "notFound" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->notFound = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchStatistic_notFound_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *arg1 = (jafar::lines::MatchStatistic *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "notFound" "', argument " "1"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp1);
  result = (int) ((arg1)->notFound);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchStatistic_print(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *arg1 = (jafar::lines::MatchStatistic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp1);
  {
    try {
      (arg1)->print();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MatchStatistic_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MatchStatistic_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__MatchStatistic);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MatchStatistic(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchStatistic *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::MatchStatistic *)new jafar::lines::MatchStatistic();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_MatchStatistic(jafar::lines::MatchStatistic *arg1) {
    delete arg1;
}

swig_class cMatchingSet;

SWIGINTERN VALUE
_wrap_new_MatchingSet__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchRepres arg1 ;
  jafar::lines::MatchingSet *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::MatchingSet" "', argument " "1"" of type '" "jafar::lines::MatchRepres""'");
  } 
  arg1 = static_cast< jafar::lines::MatchRepres >(val1);
  {
    try {
      result = (jafar::lines::MatchingSet *)new jafar::lines::MatchingSet(arg1);DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MatchingSet_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MatchingSet_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__MatchingSet);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MatchingSet__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::MatchingSet *)new jafar::lines::MatchingSet();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_MatchingSet(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_MatchingSet__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MatchingSet__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_MatchingSet'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_clear(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_compareMatchingSets(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  jafar::lines::MatchingSet *arg2 = (jafar::lines::MatchingSet *) 0 ;
  jafar::lines::MatchStatistic *arg3 = (jafar::lines::MatchStatistic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::MatchingSet::compareMatchingSets" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::MatchingSet::compareMatchingSets" "', argument " "2"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::MatchingSet * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_jafar__lines__MatchStatistic, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::MatchingSet::compareMatchingSets" "', argument " "3"" of type '" "jafar::lines::MatchStatistic *""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::MatchStatistic * >(argp3);
  {
    try {
      jafar::lines::MatchingSet::compareMatchingSets(arg1,arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_clone(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = 0 ;
  jafar::lines::MatchingSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::MatchingSet::clone" "', argument " "1"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::MatchingSet::clone" "', argument " "1"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__MatchingSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::MatchingSet::clone" "', argument " "2"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::MatchingSet::clone" "', argument " "2"" of type '" "jafar::lines::MatchingSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::MatchingSet * >(argp2);
  {
    try {
      jafar::lines::MatchingSet::clone(*arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_addMatching(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addMatching" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "addMatching" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addMatching" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->addMatching(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_print(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  {
    try {
      (arg1)->print();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_searchMatching(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "searchMatching" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "searchMatching" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "searchMatching" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(arg1)->searchMatching(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_getMaxInd(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMaxInd" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  {
    try {
      result = (int)(arg1)->getMaxInd();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_map_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  std::vector<std::vector<int > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTstd__vectorTint_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map" "', argument " "2"" of type '" "std::vector<std::vector<int > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map" "', argument " "2"" of type '" "std::vector<std::vector<int > >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<std::vector<int > > * >(argp2));
    }
  }
  if (arg1) (arg1)->map = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_map_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  std::vector<std::vector<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  result =  ((arg1)->map);
  vresult = SWIG_NewPointerObj((new std::vector<std::vector<int > >(static_cast< const std::vector<std::vector<int > >& >(result))), SWIGTYPE_p_std__vectorTstd__vectorTint_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_oldIdx_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "oldIdx" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "oldIdx" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "oldIdx" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->oldIdx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_oldIdx_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "oldIdx" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  result =  ((arg1)->oldIdx);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_newIdx_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  std::vector<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "newIdx" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "newIdx" "', argument " "2"" of type '" "std::vector<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "newIdx" "', argument " "2"" of type '" "std::vector<int >""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector<int > * >(argp2));
    }
  }
  if (arg1) (arg1)->newIdx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MatchingSet_newIdx_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::MatchingSet *arg1 = (jafar::lines::MatchingSet *) 0 ;
  std::vector<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__MatchingSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "newIdx" "', argument " "1"" of type '" "jafar::lines::MatchingSet *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::MatchingSet * >(argp1);
  result =  ((arg1)->newIdx);
  vresult = SWIG_NewPointerObj((new std::vector<int >(static_cast< const std::vector<int >& >(result))), SWIGTYPE_p_std__vectorTint_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_MatchingSet(jafar::lines::MatchingSet *arg1) {
    delete arg1;
}

swig_class cCHAINE;

SWIGINTERN VALUE
_wrap_CHAINE_num_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "num" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->num = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_num_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "num" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  result = (int) ((arg1)->num);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_flag_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flag" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "flag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->flag = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_flag_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flag" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  result = (int) ((arg1)->flag);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_npoints_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "npoints" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  ecode2 = SWIG_AsVal_short(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "npoints" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->npoints = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_npoints_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "npoints" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  result = (short) ((arg1)->npoints);
  vresult = SWIG_From_short(static_cast< short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_local_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "local" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "local" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->local) delete[] arg1->local;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->local = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->local = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_local_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "local" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  result = (char *) ((arg1)->local);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_x_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  short *arg2 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_short, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "x" "', argument " "2"" of type '" "short *""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_x_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  short *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  result = (short *) ((arg1)->x);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_y_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  short *arg2 = (short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_short, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "y" "', argument " "2"" of type '" "short *""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CHAINE_y_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  short *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  result = (short *) ((arg1)->y);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CHAINE_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CHAINE_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__CHAINE);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CHAINE(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::CHAINE *)new jafar::lines::CHAINE();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_CHAINE(jafar::lines::CHAINE *arg1) {
    delete arg1;
}

swig_class cIMCT;

SWIGINTERN VALUE
_wrap_IMCT_liste_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  std::vector<jafar::lines::CHAINE * > *arg2 = (std::vector<jafar::lines::CHAINE * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "liste" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorTjafar__lines__CHAINE_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "liste" "', argument " "2"" of type '" "std::vector<jafar::lines::CHAINE * > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector<jafar::lines::CHAINE * > * >(argp2);
  if (arg1) (arg1)->liste = *arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IMCT_liste_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  std::vector<jafar::lines::CHAINE * > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "liste" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  result = (std::vector<jafar::lines::CHAINE * > *)& ((arg1)->liste);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTjafar__lines__CHAINE_p_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IMCT_nchains_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nchains" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nchains" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nchains = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IMCT_nchains_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nchains" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  result = (int) ((arg1)->nchains);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IMCT_di_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "di" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "di" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->di = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IMCT_di_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "di" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  result = (int) ((arg1)->di);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IMCT_dj_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dj" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dj" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->dj = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_IMCT_dj_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dj" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  result = (int) ((arg1)->dj);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_IMCT_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_IMCT_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__IMCT);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_IMCT(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::IMCT *)new jafar::lines::IMCT();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_IMCT(jafar::lines::IMCT *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ExtractContours1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  jafar::lines::IMCT *arg2 = (jafar::lines::IMCT *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  
  if ((argc < 11) || (argc > 11)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 11)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::ExtractContours1" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::ExtractContours1" "', argument " "2"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::IMCT * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::ExtractContours1" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::ExtractContours1" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::ExtractContours1" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::ExtractContours1" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "jafar::lines::ExtractContours1" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "jafar::lines::ExtractContours1" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "jafar::lines::ExtractContours1" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(argv[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "jafar::lines::ExtractContours1" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_int(argv[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "jafar::lines::ExtractContours1" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    try {
      jafar::lines::ExtractContours1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_seuilhy(int argc, VALUE *argv, VALUE self) {
  jafar::lines::IMCT *arg1 = (jafar::lines::IMCT *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__lines__IMCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::seuilhy" "', argument " "1"" of type '" "jafar::lines::IMCT *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::IMCT * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::seuilhy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::seuilhy" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::seuilhy" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::seuilhy" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::seuilhy" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "jafar::lines::seuilhy" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "jafar::lines::seuilhy" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      jafar::lines::seuilhy(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_confcont(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::confcont" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::confcont" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::confcont" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::confcont" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::confcont" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::confcont" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "jafar::lines::confcont" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "jafar::lines::confcont" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  {
    try {
      result = (int)jafar::lines::confcont(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_get_direction(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::get_direction" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::get_direction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::get_direction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::get_direction" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)jafar::lines::get_direction(arg1,arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_destroy_leftright(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::destroy_leftright" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::destroy_leftright" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      jafar::lines::destroy_leftright(arg1,arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_initChain(int argc, VALUE *argv, VALUE self) {
  jafar::lines::CHAINE *arg1 = (jafar::lines::CHAINE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__lines__CHAINE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::initChain" "', argument " "1"" of type '" "jafar::lines::CHAINE *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::CHAINE * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::initChain" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      jafar::lines::initChain(arg1,arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_contourPtTest(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::contourPtTest" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "jafar::lines::contourPtTest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::contourPtTest" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)jafar::lines::contourPtTest(arg1,arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distPointVector(int argc, VALUE *argv, VALUE self) {
  CvPoint arg1 ;
  CvPoint arg2 ;
  CvPoint arg3 ;
  double result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::distPointVector" "', argument " "1"" of type '" "CvPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::distPointVector" "', argument " "1"" of type '" "CvPoint""'");
    } else {
      arg1 = *(reinterpret_cast< CvPoint * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::distPointVector" "', argument " "2"" of type '" "CvPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::distPointVector" "', argument " "2"" of type '" "CvPoint""'");
    } else {
      arg2 = *(reinterpret_cast< CvPoint * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::distPointVector" "', argument " "3"" of type '" "CvPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::distPointVector" "', argument " "3"" of type '" "CvPoint""'");
    } else {
      arg3 = *(reinterpret_cast< CvPoint * >(argp3));
    }
  }
  {
    try {
      result = (double)jafar::lines::distPointVector(arg1,arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_signedDistPointVector(int argc, VALUE *argv, VALUE self) {
  CvPoint arg1 ;
  CvPoint arg2 ;
  CvPoint arg3 ;
  double result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::signedDistPointVector" "', argument " "1"" of type '" "CvPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::signedDistPointVector" "', argument " "1"" of type '" "CvPoint""'");
    } else {
      arg1 = *(reinterpret_cast< CvPoint * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::signedDistPointVector" "', argument " "2"" of type '" "CvPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::signedDistPointVector" "', argument " "2"" of type '" "CvPoint""'");
    } else {
      arg2 = *(reinterpret_cast< CvPoint * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::signedDistPointVector" "', argument " "3"" of type '" "CvPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::signedDistPointVector" "', argument " "3"" of type '" "CvPoint""'");
    } else {
      arg3 = *(reinterpret_cast< CvPoint * >(argp3));
    }
  }
  {
    try {
      result = (double)jafar::lines::signedDistPointVector(arg1,arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_distPtPt(int argc, VALUE *argv, VALUE self) {
  CvPoint arg1 ;
  CvPoint arg2 ;
  double result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::distPtPt" "', argument " "1"" of type '" "CvPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::distPtPt" "', argument " "1"" of type '" "CvPoint""'");
    } else {
      arg1 = *(reinterpret_cast< CvPoint * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::distPtPt" "', argument " "2"" of type '" "CvPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::distPtPt" "', argument " "2"" of type '" "CvPoint""'");
    } else {
      arg2 = *(reinterpret_cast< CvPoint * >(argp2));
    }
  }
  {
    try {
      result = (double)jafar::lines::distPtPt(arg1,arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_calcGradientImage(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::calcGradientImage" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  {
    try {
      result = (bool)jafar::lines::calcGradientImage(arg1);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_calcXYGradientImages(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  int arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::calcXYGradientImages" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::calcXYGradientImages" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::calcXYGradientImages" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::calcXYGradientImages" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (bool)jafar::lines::calcXYGradientImages(arg1,arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_calcOrientedGradientImage(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::calcOrientedGradientImage" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::calcOrientedGradientImage" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::calcOrientedGradientImage" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  {
    try {
      result = (bool)jafar::lines::calcOrientedGradientImage(arg1,arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_validLine__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  CvPoint arg3 ;
  CvPoint arg4 ;
  double arg5 ;
  double arg6 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::validLine" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::validLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::validLine" "', argument " "3"" of type '" "CvPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::validLine" "', argument " "3"" of type '" "CvPoint""'");
    } else {
      arg3 = *(reinterpret_cast< CvPoint * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "jafar::lines::validLine" "', argument " "4"" of type '" "CvPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::validLine" "', argument " "4"" of type '" "CvPoint""'");
    } else {
      arg4 = *(reinterpret_cast< CvPoint * >(argp4));
    }
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::validLine" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::validLine" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (double)jafar::lines::validLine(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_validLine__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  CvPoint arg3 ;
  CvPoint arg4 ;
  double arg5 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::validLine" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::validLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::validLine" "', argument " "3"" of type '" "CvPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::validLine" "', argument " "3"" of type '" "CvPoint""'");
    } else {
      arg3 = *(reinterpret_cast< CvPoint * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "jafar::lines::validLine" "', argument " "4"" of type '" "CvPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::validLine" "', argument " "4"" of type '" "CvPoint""'");
    } else {
      arg4 = *(reinterpret_cast< CvPoint * >(argp4));
    }
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::validLine" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)jafar::lines::validLine(arg1,arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_validLine__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  CvPoint arg3 ;
  CvPoint arg4 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::validLine" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::validLine" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::validLine" "', argument " "3"" of type '" "CvPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::validLine" "', argument " "3"" of type '" "CvPoint""'");
    } else {
      arg3 = *(reinterpret_cast< CvPoint * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "jafar::lines::validLine" "', argument " "4"" of type '" "CvPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::validLine" "', argument " "4"" of type '" "CvPoint""'");
    } else {
      arg4 = *(reinterpret_cast< CvPoint * >(argp4));
    }
  }
  {
    try {
      result = (double)jafar::lines::validLine(arg1,arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_validLine(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs;
  if (argc > 6) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CvPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_CvPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_validLine__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CvPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_CvPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_validLine__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CvPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_CvPoint, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_validLine__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'validLine'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_calcIntersec(int argc, VALUE *argv, VALUE self) {
  CvPoint arg1 ;
  CvPoint arg2 ;
  CvPoint arg3 ;
  CvPoint arg4 ;
  CvPoint *arg5 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::calcIntersec" "', argument " "1"" of type '" "CvPoint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::calcIntersec" "', argument " "1"" of type '" "CvPoint""'");
    } else {
      arg1 = *(reinterpret_cast< CvPoint * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::calcIntersec" "', argument " "2"" of type '" "CvPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::calcIntersec" "', argument " "2"" of type '" "CvPoint""'");
    } else {
      arg2 = *(reinterpret_cast< CvPoint * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::calcIntersec" "', argument " "3"" of type '" "CvPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::calcIntersec" "', argument " "3"" of type '" "CvPoint""'");
    } else {
      arg3 = *(reinterpret_cast< CvPoint * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CvPoint,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "jafar::lines::calcIntersec" "', argument " "4"" of type '" "CvPoint""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::calcIntersec" "', argument " "4"" of type '" "CvPoint""'");
    } else {
      arg4 = *(reinterpret_cast< CvPoint * >(argp4));
    }
  }
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_CvPoint,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "jafar::lines::calcIntersec" "', argument " "5"" of type '" "CvPoint &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::calcIntersec" "', argument " "5"" of type '" "CvPoint &""'"); 
  }
  arg5 = reinterpret_cast< CvPoint * >(argp5);
  {
    try {
      result = (int)jafar::lines::calcIntersec(arg1,arg2,arg3,arg4,*arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_startTimeMeasure(int argc, VALUE *argv, VALUE self) {
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (double)jafar::lines::startTimeMeasure();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_stopTimeMeasure(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double result;
  double val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jafar::lines::stopTimeMeasure" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)jafar::lines::stopTimeMeasure(arg1);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cHistogram;

SWIGINTERN VALUE
_wrap_new_Histogram__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::Histogram *)new jafar::lines::Histogram();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Histogram_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Histogram_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__Histogram);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Histogram__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = 0 ;
  jafar::lines::Histogram *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_jafar__lines__Histogram,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::Histogram" "', argument " "1"" of type '" "jafar::lines::Histogram const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::Histogram" "', argument " "1"" of type '" "jafar::lines::Histogram const &""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  {
    try {
      result = (jafar::lines::Histogram *)new jafar::lines::Histogram((jafar::lines::Histogram const &)*arg1);DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Histogram(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Histogram__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__Histogram, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Histogram__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Histogram'");
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_Histogram(jafar::lines::Histogram *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Histogram_initHisto(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = (jafar::lines::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "initHisto" "', argument " "1"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  {
    try {
      (arg1)->initHisto();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Histogram_addVectorInfo(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = (jafar::lines::Histogram *) 0 ;
  std::vector<int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addVectorInfo" "', argument " "1"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorTint_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addVectorInfo" "', argument " "2"" of type '" "std::vector<int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addVectorInfo" "', argument " "2"" of type '" "std::vector<int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<int > * >(argp2);
  {
    try {
      (arg1)->addVectorInfo(*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Histogram_addImageInfo(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = (jafar::lines::Histogram *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addImageInfo" "', argument " "1"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addImageInfo" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  {
    try {
      (arg1)->addImageInfo(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Histogram_print(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = (jafar::lines::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "jafar::lines::Histogram const *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  {
    try {
      ((jafar::lines::Histogram const *)arg1)->print();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Histogram_isValid(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = (jafar::lines::Histogram *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isValid" "', argument " "1"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  {
    try {
      result = (int)(arg1)->isValid();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Histogram_histo_set(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = (jafar::lines::Histogram *) 0 ;
  CvHistogram *arg2 = (CvHistogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "histo" "', argument " "1"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_CvHistogram, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "histo" "', argument " "2"" of type '" "CvHistogram *""'"); 
  }
  arg2 = reinterpret_cast< CvHistogram * >(argp2);
  if (arg1) (arg1)->histo = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Histogram_histo_get(int argc, VALUE *argv, VALUE self) {
  jafar::lines::Histogram *arg1 = (jafar::lines::Histogram *) 0 ;
  CvHistogram *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "histo" "', argument " "1"" of type '" "jafar::lines::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::Histogram * >(argp1);
  result = (CvHistogram *) ((arg1)->histo);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CvHistogram, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cLsExtractor;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LsExtractor_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LsExtractor_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__LsExtractor);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LsExtractor(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::LsExtractor *)new jafar::lines::LsExtractor();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_procCanny(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procCanny" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procCanny" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procCanny" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  {
    try {
      result = (bool)(arg1)->procCanny(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_procCannySt(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::procCannySt" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::procCannySt" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LsExtractor::procCannySt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LsExtractor::procCannySt" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::LsExtractor::procCannySt" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (bool)jafar::lines::LsExtractor::procCannySt(arg1,arg2,arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_extractLineSegments__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractLineSegments" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractLineSegments" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "extractLineSegments" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "extractLineSegments" "', argument " "4"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "extractLineSegments" "', argument " "4"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg4 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "extractLineSegments" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->extractLineSegments(arg2,arg3,*arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_extractLineSegments__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg3 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extractLineSegments" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extractLineSegments" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "extractLineSegments" "', argument " "3"" of type '" "jafar::image::Image *""'"); 
  }
  arg3 = reinterpret_cast< jafar::image::Image * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "extractLineSegments" "', argument " "4"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "extractLineSegments" "', argument " "4"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg4 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp4);
  {
    try {
      (arg1)->extractLineSegments(arg2,arg3,*arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsExtractor_extractLineSegments(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LsExtractor_extractLineSegments__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LsExtractor_extractLineSegments__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsExtractor_extractLineSegments'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_extractLineSegmentsSt__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      jafar::lines::LsExtractor::extractLineSegmentsSt(arg1,arg2,*arg3,arg4,arg5,arg6,arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_extractLineSegmentsSt__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      jafar::lines::LsExtractor::extractLineSegmentsSt(arg1,arg2,*arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_extractLineSegmentsSt__SWIG_2(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  double arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      jafar::lines::LsExtractor::extractLineSegmentsSt(arg1,arg2,*arg3,arg4,arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_extractLineSegmentsSt__SWIG_3(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      jafar::lines::LsExtractor::extractLineSegmentsSt(arg1,arg2,*arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_extractLineSegmentsSt__SWIG_4(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::extractLineSegmentsSt" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  {
    try {
      jafar::lines::LsExtractor::extractLineSegmentsSt(arg1,arg2,*arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsExtractor_extractLineSegmentsSt(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs;
  if (argc > 7) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LsExtractor_extractLineSegmentsSt__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LsExtractor_extractLineSegmentsSt__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LsExtractor_extractLineSegmentsSt__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_LsExtractor_extractLineSegmentsSt__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_LsExtractor_extractLineSegmentsSt__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsExtractor_extractLineSegmentsSt'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_procHough(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procHough" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procHough" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procHough" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "procHough" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  {
    try {
      result = (bool)(arg1)->procHough(arg2,*arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_procCvFindContour__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  double arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procCvFindContour" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procCvFindContour" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procCvFindContour" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "procCvFindContour" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "procCvFindContour" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (bool)(arg1)->procCvFindContour(arg2,*arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_procCvFindContour__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  jafar::image::Image *arg2 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procCvFindContour" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procCvFindContour" "', argument " "2"" of type '" "jafar::image::Image *""'"); 
  }
  arg2 = reinterpret_cast< jafar::image::Image * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procCvFindContour" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "procCvFindContour" "', argument " "3"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg3 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp3);
  {
    try {
      result = (bool)(arg1)->procCvFindContour(arg2,*arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsExtractor_procCvFindContour(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LsExtractor_procCvFindContour__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LsExtractor_procCvFindContour__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsExtractor_procCvFindContour'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_findLinesDP(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::findLinesDP" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::findLinesDP" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::findLinesDP" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LsExtractor::findLinesDP" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      jafar::lines::LsExtractor::findLinesDP(arg1,*arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_findLinesCalife__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::findLinesCalife" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::findLinesCalife" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::findLinesCalife" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LsExtractor::findLinesCalife" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      jafar::lines::LsExtractor::findLinesCalife(arg1,*arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_findLinesCalife__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::image::Image *arg1 = (jafar::image::Image *) 0 ;
  jafar::lines::LineSegmentSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_jafar__image__Image, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::findLinesCalife" "', argument " "1"" of type '" "jafar::image::Image *""'"); 
  }
  arg1 = reinterpret_cast< jafar::image::Image * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_jafar__lines__LineSegmentSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::findLinesCalife" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::findLinesCalife" "', argument " "2"" of type '" "jafar::lines::LineSegmentSet &""'"); 
  }
  arg2 = reinterpret_cast< jafar::lines::LineSegmentSet * >(argp2);
  {
    try {
      jafar::lines::LsExtractor::findLinesCalife(arg1,*arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsExtractor_findLinesCalife(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LsExtractor_findLinesCalife__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__image__Image, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_jafar__lines__LineSegmentSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LsExtractor_findLinesCalife__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsExtractor_findLinesCalife'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_dp__SWIG_0(int argc, VALUE *argv, VALUE self) {
  short *arg1 = (short *) 0 ;
  short *arg2 = (short *) 0 ;
  int arg3 ;
  int arg4 ;
  std::vector<CvPoint > *arg5 = 0 ;
  double arg6 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "1"" of type '" "short *""'"); 
  }
  arg1 = reinterpret_cast< short * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "2"" of type '" "short *""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_std__vectorTCvPoint_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "5"" of type '" "std::vector<CvPoint > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::dp" "', argument " "5"" of type '" "std::vector<CvPoint > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector<CvPoint > * >(argp5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)jafar::lines::LsExtractor::dp(arg1,arg2,arg3,arg4,*arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_dp__SWIG_1(int argc, VALUE *argv, VALUE self) {
  short *arg1 = (short *) 0 ;
  short *arg2 = (short *) 0 ;
  int arg3 ;
  int arg4 ;
  std::vector<CvPoint > *arg5 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "1"" of type '" "short *""'"); 
  }
  arg1 = reinterpret_cast< short * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "2"" of type '" "short *""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_std__vectorTCvPoint_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "jafar::lines::LsExtractor::dp" "', argument " "5"" of type '" "std::vector<CvPoint > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "jafar::lines::LsExtractor::dp" "', argument " "5"" of type '" "std::vector<CvPoint > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector<CvPoint > * >(argp5);
  {
    try {
      result = (int)jafar::lines::LsExtractor::dp(arg1,arg2,arg3,arg4,*arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsExtractor_dp(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs;
  if (argc > 6) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_short, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorTCvPoint_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_LsExtractor_dp__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_short, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorTCvPoint_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_LsExtractor_dp__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsExtractor_dp'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setCannyLowerThresh(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setCannyLowerThresh" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setCannyLowerThresh" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setCannyLowerThresh(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setCannyHigherThresh(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setCannyHigherThresh" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setCannyHigherThresh" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setCannyHigherThresh(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setCannyAp(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setCannyAp" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setCannyAp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setCannyAp(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setCannyPara(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setCannyPara" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setCannyPara" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setCannyPara" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setCannyPara" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->setCannyPara(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setHoughMethod(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHoughMethod" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setHoughMethod" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setHoughMethod(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setHoughRho(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHoughRho" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setHoughRho" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHoughRho(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setHoughTheta(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHoughTheta" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setHoughTheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHoughTheta(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setHoughThreshold(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHoughThreshold" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setHoughThreshold" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setHoughThreshold(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setHoughParam1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHoughParam1" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setHoughParam1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHoughParam1(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setHoughParam2(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHoughParam2" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setHoughParam2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setHoughParam2(arg2);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsExtractor_setHoughPara(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsExtractor *arg1 = (jafar::lines::LsExtractor *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHoughPara" "', argument " "1"" of type '" "jafar::lines::LsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setHoughPara" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setHoughPara" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "setHoughPara" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "setHoughPara" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "setHoughPara" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "setHoughPara" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      (arg1)->setHoughPara(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_LsExtractor(jafar::lines::LsExtractor *arg1) {
    delete arg1;
}

swig_class cLsPredictor2D;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_LsPredictor2D_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_LsPredictor2D_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__LsPredictor2D);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_LsPredictor2D(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsPredictor2D *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::LsPredictor2D *)new jafar::lines::LsPredictor2D();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsPredictor2D_initPredictor__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsPredictor2D *arg1 = (jafar::lines::LsPredictor2D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  jafar::lines::PredictionModel arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "initPredictor" "', argument " "1"" of type '" "jafar::lines::LsPredictor2D *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsPredictor2D * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "initPredictor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "initPredictor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "initPredictor" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "initPredictor" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "initPredictor" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "initPredictor" "', argument " "7"" of type '" "jafar::lines::PredictionModel""'");
  } 
  arg7 = static_cast< jafar::lines::PredictionModel >(val7);
  {
    try {
      (arg1)->initPredictor(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsPredictor2D_initPredictor__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsPredictor2D *arg1 = (jafar::lines::LsPredictor2D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "initPredictor" "', argument " "1"" of type '" "jafar::lines::LsPredictor2D *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsPredictor2D * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "initPredictor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "initPredictor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "initPredictor" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "initPredictor" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "initPredictor" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (arg1)->initPredictor(arg2,arg3,arg4,arg5,arg6);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsPredictor2D_initPredictor(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsPredictor2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_LsPredictor2D_initPredictor__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsPredictor2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_LsPredictor2D_initPredictor__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsPredictor2D_initPredictor'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsPredictor2D_updatePredictor(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsPredictor2D *arg1 = (jafar::lines::LsPredictor2D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "updatePredictor" "', argument " "1"" of type '" "jafar::lines::LsPredictor2D *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsPredictor2D * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "updatePredictor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "updatePredictor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "updatePredictor" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "updatePredictor" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "updatePredictor" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "updatePredictor" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "updatePredictor" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "updatePredictor" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    try {
      (arg1)->updatePredictor(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsPredictor2D_getPredictionEP__SWIG_0(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsPredictor2D *arg1 = (jafar::lines::LsPredictor2D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double arg10 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPredictionEP" "', argument " "1"" of type '" "jafar::lines::LsPredictor2D *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsPredictor2D * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getPredictionEP" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getPredictionEP" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "getPredictionEP" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "getPredictionEP" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "getPredictionEP" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "getPredictionEP" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "getPredictionEP" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(argv[7], &argp9, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "getPredictionEP" "', argument " "9"" of type '" "double &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "9"" of type '" "double &""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  ecode10 = SWIG_AsVal_double(argv[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "getPredictionEP" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    try {
      result = (double)(arg1)->getPredictionEP(arg2,arg3,arg4,arg5,*arg6,*arg7,*arg8,*arg9,arg10);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsPredictor2D_getPredictionEP__SWIG_1(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsPredictor2D *arg1 = (jafar::lines::LsPredictor2D *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  double *arg8 = 0 ;
  double *arg9 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPredictionEP" "', argument " "1"" of type '" "jafar::lines::LsPredictor2D *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsPredictor2D * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getPredictionEP" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getPredictionEP" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "getPredictionEP" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "getPredictionEP" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "getPredictionEP" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "getPredictionEP" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  res8 = SWIG_ConvertPtr(argv[6], &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "getPredictionEP" "', argument " "8"" of type '" "double &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "8"" of type '" "double &""'"); 
  }
  arg8 = reinterpret_cast< double * >(argp8);
  res9 = SWIG_ConvertPtr(argv[7], &argp9, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "getPredictionEP" "', argument " "9"" of type '" "double &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPredictionEP" "', argument " "9"" of type '" "double &""'"); 
  }
  arg9 = reinterpret_cast< double * >(argp9);
  {
    try {
      result = (double)(arg1)->getPredictionEP(arg2,arg3,arg4,arg5,*arg6,*arg7,*arg8,*arg9);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_LsPredictor2D_getPredictionEP(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsPredictor2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_LsPredictor2D_getPredictionEP__SWIG_1(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_jafar__lines__LsPredictor2D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_double, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_LsPredictor2D_getPredictionEP__SWIG_0(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'LsPredictor2D_getPredictionEP'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LsPredictor2D_benchmarkTest(int argc, VALUE *argv, VALUE self) {
  jafar::lines::LsPredictor2D *arg1 = (jafar::lines::LsPredictor2D *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__LsPredictor2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "benchmarkTest" "', argument " "1"" of type '" "jafar::lines::LsPredictor2D *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::LsPredictor2D * >(argp1);
  {
    try {
      result = (double)(arg1)->benchmarkTest();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_LsPredictor2D(jafar::lines::LsPredictor2D *arg1) {
    delete arg1;
}

swig_class cConstPositionKF;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ConstPositionKF_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ConstPositionKF_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__ConstPositionKF);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ConstPositionKF(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstPositionKF *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::ConstPositionKF *)new jafar::lines::ConstPositionKF();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstPositionKF_initKF(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstPositionKF *arg1 = (jafar::lines::ConstPositionKF *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstPositionKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "initKF" "', argument " "1"" of type '" "jafar::lines::ConstPositionKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstPositionKF * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "initKF" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "initKF" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->initKF(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstPositionKF_updateKF(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstPositionKF *arg1 = (jafar::lines::ConstPositionKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstPositionKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "updateKF" "', argument " "1"" of type '" "jafar::lines::ConstPositionKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstPositionKF * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "updateKF" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "updateKF" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "updateKF" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->updateKF(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstPositionKF_getPred(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstPositionKF *arg1 = (jafar::lines::ConstPositionKF *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstPositionKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPred" "', argument " "1"" of type '" "jafar::lines::ConstPositionKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstPositionKF * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getPred" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPred" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getPred" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPred" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->getPred(*arg2,*arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstPositionKF_getPosPred(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstPositionKF *arg1 = (jafar::lines::ConstPositionKF *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstPositionKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPosPred" "', argument " "1"" of type '" "jafar::lines::ConstPositionKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstPositionKF * >(argp1);
  {
    try {
      result = (double)(arg1)->getPosPred();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstPositionKF_getPosVar(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstPositionKF *arg1 = (jafar::lines::ConstPositionKF *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstPositionKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPosVar" "', argument " "1"" of type '" "jafar::lines::ConstPositionKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstPositionKF * >(argp1);
  {
    try {
      result = (double)(arg1)->getPosVar();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_ConstPositionKF(jafar::lines::ConstPositionKF *arg1) {
    delete arg1;
}

swig_class cConstVelocityKF;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ConstVelocityKF_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ConstVelocityKF_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_jafar__lines__ConstVelocityKF);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ConstVelocityKF(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstVelocityKF *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (jafar::lines::ConstVelocityKF *)new jafar::lines::ConstVelocityKF();DATA_PTR(self) = result;
      
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstVelocityKF_initKF(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstVelocityKF *arg1 = (jafar::lines::ConstVelocityKF *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstVelocityKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "initKF" "', argument " "1"" of type '" "jafar::lines::ConstVelocityKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstVelocityKF * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "initKF" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "initKF" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->initKF(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstVelocityKF_updateKF(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstVelocityKF *arg1 = (jafar::lines::ConstVelocityKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstVelocityKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "updateKF" "', argument " "1"" of type '" "jafar::lines::ConstVelocityKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstVelocityKF * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "updateKF" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "updateKF" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "updateKF" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->updateKF(arg2,arg3,arg4);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstVelocityKF_getPred(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstVelocityKF *arg1 = (jafar::lines::ConstVelocityKF *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstVelocityKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPred" "', argument " "1"" of type '" "jafar::lines::ConstVelocityKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstVelocityKF * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getPred" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPred" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getPred" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPred" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "getPred" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPred" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "getPred" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getPred" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      (arg1)->getPred(*arg2,*arg3,*arg4,*arg5);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstVelocityKF_getPosPred(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstVelocityKF *arg1 = (jafar::lines::ConstVelocityKF *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstVelocityKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPosPred" "', argument " "1"" of type '" "jafar::lines::ConstVelocityKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstVelocityKF * >(argp1);
  {
    try {
      result = (double)(arg1)->getPosPred();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstVelocityKF_getPosVar(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstVelocityKF *arg1 = (jafar::lines::ConstVelocityKF *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstVelocityKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPosVar" "', argument " "1"" of type '" "jafar::lines::ConstVelocityKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstVelocityKF * >(argp1);
  {
    try {
      result = (double)(arg1)->getPosVar();
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstVelocityKF_setPosPeriod(int argc, VALUE *argv, VALUE self) {
  jafar::lines::ConstVelocityKF *arg1 = (jafar::lines::ConstVelocityKF *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_jafar__lines__ConstVelocityKF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPosPeriod" "', argument " "1"" of type '" "jafar::lines::ConstVelocityKF *""'"); 
  }
  arg1 = reinterpret_cast< jafar::lines::ConstVelocityKF * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setPosPeriod" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setPosPeriod" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->setPosPeriod(arg2,arg3);
    }
    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::lines::LinesException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, LinesException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_GENERIC@*/    /*@SWIG:JAFAR_CATCH_MODULE_EXCEPTION@*/
    catch(jafar::kernel::JafarException& e) {
      VALUE id_symbol = INT2NUM((int)e.getExceptionId());
      VALUE exception = rb_class_new_instance(1, &id_symbol, JafarException_ruby_exception());
      rb_raise(exception, "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ROOT_EXCEPTION@*/    catch(jafar::kernel::Exception& e) {
      rb_raise(Exception_ruby_exception(), "%s", e.what().c_str());
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_STD_EXCEPTION@*/    catch(std::exception& e)
    {
      rb_raise(rb_eRuntimeError, "%s", e.what()); 
    }
    /*@SWIG@*/
    /*@SWIG:JAFAR_CATCH_ALL_EXCEPTIONS@*/    catch(...)
    {
      rb_raise(rb_eRuntimeError, "unknown error"); 
    }
    /*@SWIG@*/
    /*@SWIG@*/
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_jafar_lines_ConstVelocityKF(jafar::lines::ConstVelocityKF *arg1) {
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_jafar__kernel__JafarExceptionTo_p_jafar__kernel__Exception(void *x) {
    return (void *)((jafar::kernel::Exception *)  ((jafar::kernel::JafarException *) x));
}
static void *_p_jafar__lines__LinesExceptionTo_p_jafar__kernel__Exception(void *x) {
    return (void *)((jafar::kernel::Exception *)  ((jafar::lines::LinesException *) x));
}
static swig_type_info _swigt__p_CvHistogram = {"_p_CvHistogram", "CvHistogram *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CvPoint = {"_p_CvPoint", "CvPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CvScalar = {"_p_CvScalar", "CvScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__image__Image = {"_p_jafar__image__Image", "jafar::image::Image *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__kernel__Exception = {"_p_jafar__kernel__Exception", "jafar::kernel::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__kernel__JafarException = {"_p_jafar__kernel__JafarException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_jafar__lines__CHAINE = {"_p_jafar__lines__CHAINE", "jafar::lines::CHAINE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__ConstPositionKF = {"_p_jafar__lines__ConstPositionKF", "jafar::lines::ConstPositionKF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__ConstVelocityKF = {"_p_jafar__lines__ConstVelocityKF", "jafar::lines::ConstVelocityKF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__Histogram = {"_p_jafar__lines__Histogram", "jafar::lines::Histogram *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__IMCT = {"_p_jafar__lines__IMCT", "jafar::lines::IMCT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__LineSegment = {"_p_jafar__lines__LineSegment", "jafar::lines::LineSegment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__LineSegmentSet = {"_p_jafar__lines__LineSegmentSet", "jafar::lines::LineSegmentSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__LinesException = {"_p_jafar__lines__LinesException", "jafar::lines::LinesException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__LsExtractor = {"_p_jafar__lines__LsExtractor", "jafar::lines::LsExtractor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__LsPredictor2D = {"_p_jafar__lines__LsPredictor2D", "jafar::lines::LsPredictor2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__LsTracker = {"_p_jafar__lines__LsTracker", "jafar::lines::LsTracker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__MatchStatistic = {"_p_jafar__lines__MatchStatistic", "jafar::lines::MatchStatistic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jafar__lines__MatchingSet = {"_p_jafar__lines__MatchingSet", "jafar::lines::MatchingSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_jafar__lines__LineSegment = {"_p_p_jafar__lines__LineSegment", "jafar::lines::LineSegment **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTCvPoint_t = {"_p_std__vectorTCvPoint_t", "std::vector<CvPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_t = {"_p_std__vectorTdouble_t", "std::vector<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTint_t = {"_p_std__vectorTint_t", "std::vector<int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTjafar__lines__CHAINE_p_t = {"_p_std__vectorTjafar__lines__CHAINE_p_t", "std::vector<jafar::lines::CHAINE * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTjafar__lines__LineSegment_t = {"_p_std__vectorTjafar__lines__LineSegment_t", "std::vector<jafar::lines::LineSegment > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTstd__vectorTCvPoint_t_t = {"_p_std__vectorTstd__vectorTCvPoint_t_t", "std::vector<std::vector<CvPoint > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTstd__vectorTint_t_t = {"_p_std__vectorTstd__vectorTint_t_t", "std::vector<std::vector<int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint = {"_p_uint", "uint *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CvHistogram,
  &_swigt__p_CvPoint,
  &_swigt__p_CvScalar,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_jafar__image__Image,
  &_swigt__p_jafar__kernel__Exception,
  &_swigt__p_jafar__kernel__JafarException,
  &_swigt__p_jafar__lines__CHAINE,
  &_swigt__p_jafar__lines__ConstPositionKF,
  &_swigt__p_jafar__lines__ConstVelocityKF,
  &_swigt__p_jafar__lines__Histogram,
  &_swigt__p_jafar__lines__IMCT,
  &_swigt__p_jafar__lines__LineSegment,
  &_swigt__p_jafar__lines__LineSegmentSet,
  &_swigt__p_jafar__lines__LinesException,
  &_swigt__p_jafar__lines__LsExtractor,
  &_swigt__p_jafar__lines__LsPredictor2D,
  &_swigt__p_jafar__lines__LsTracker,
  &_swigt__p_jafar__lines__MatchStatistic,
  &_swigt__p_jafar__lines__MatchingSet,
  &_swigt__p_p_jafar__lines__LineSegment,
  &_swigt__p_short,
  &_swigt__p_std__vectorTCvPoint_t,
  &_swigt__p_std__vectorTdouble_t,
  &_swigt__p_std__vectorTint_t,
  &_swigt__p_std__vectorTjafar__lines__CHAINE_p_t,
  &_swigt__p_std__vectorTjafar__lines__LineSegment_t,
  &_swigt__p_std__vectorTstd__vectorTCvPoint_t_t,
  &_swigt__p_std__vectorTstd__vectorTint_t_t,
  &_swigt__p_uint,
};

static swig_cast_info _swigc__p_CvHistogram[] = {  {&_swigt__p_CvHistogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CvPoint[] = {  {&_swigt__p_CvPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CvScalar[] = {  {&_swigt__p_CvScalar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__image__Image[] = {  {&_swigt__p_jafar__image__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__kernel__JafarException[] = {{&_swigt__p_jafar__kernel__JafarException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__kernel__Exception[] = {  {&_swigt__p_jafar__kernel__Exception, 0, 0, 0},  {&_swigt__p_jafar__kernel__JafarException, _p_jafar__kernel__JafarExceptionTo_p_jafar__kernel__Exception, 0, 0},  {&_swigt__p_jafar__lines__LinesException, _p_jafar__lines__LinesExceptionTo_p_jafar__kernel__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__CHAINE[] = {  {&_swigt__p_jafar__lines__CHAINE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__ConstPositionKF[] = {  {&_swigt__p_jafar__lines__ConstPositionKF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__ConstVelocityKF[] = {  {&_swigt__p_jafar__lines__ConstVelocityKF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__Histogram[] = {  {&_swigt__p_jafar__lines__Histogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__IMCT[] = {  {&_swigt__p_jafar__lines__IMCT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__LineSegment[] = {  {&_swigt__p_jafar__lines__LineSegment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__LineSegmentSet[] = {  {&_swigt__p_jafar__lines__LineSegmentSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__LinesException[] = {  {&_swigt__p_jafar__lines__LinesException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__LsExtractor[] = {  {&_swigt__p_jafar__lines__LsExtractor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__LsPredictor2D[] = {  {&_swigt__p_jafar__lines__LsPredictor2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__LsTracker[] = {  {&_swigt__p_jafar__lines__LsTracker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__MatchStatistic[] = {  {&_swigt__p_jafar__lines__MatchStatistic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jafar__lines__MatchingSet[] = {  {&_swigt__p_jafar__lines__MatchingSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_jafar__lines__LineSegment[] = {  {&_swigt__p_p_jafar__lines__LineSegment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTCvPoint_t[] = {  {&_swigt__p_std__vectorTCvPoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_t[] = {  {&_swigt__p_std__vectorTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_t[] = {  {&_swigt__p_std__vectorTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTjafar__lines__CHAINE_p_t[] = {  {&_swigt__p_std__vectorTjafar__lines__CHAINE_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTjafar__lines__LineSegment_t[] = {  {&_swigt__p_std__vectorTjafar__lines__LineSegment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__vectorTCvPoint_t_t[] = {  {&_swigt__p_std__vectorTstd__vectorTCvPoint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__vectorTint_t_t[] = {  {&_swigt__p_std__vectorTstd__vectorTint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint[] = {  {&_swigt__p_uint, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CvHistogram,
  _swigc__p_CvPoint,
  _swigc__p_CvScalar,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_jafar__image__Image,
  _swigc__p_jafar__kernel__Exception,
  _swigc__p_jafar__kernel__JafarException,
  _swigc__p_jafar__lines__CHAINE,
  _swigc__p_jafar__lines__ConstPositionKF,
  _swigc__p_jafar__lines__ConstVelocityKF,
  _swigc__p_jafar__lines__Histogram,
  _swigc__p_jafar__lines__IMCT,
  _swigc__p_jafar__lines__LineSegment,
  _swigc__p_jafar__lines__LineSegmentSet,
  _swigc__p_jafar__lines__LinesException,
  _swigc__p_jafar__lines__LsExtractor,
  _swigc__p_jafar__lines__LsPredictor2D,
  _swigc__p_jafar__lines__LsTracker,
  _swigc__p_jafar__lines__MatchStatistic,
  _swigc__p_jafar__lines__MatchingSet,
  _swigc__p_p_jafar__lines__LineSegment,
  _swigc__p_short,
  _swigc__p_std__vectorTCvPoint_t,
  _swigc__p_std__vectorTdouble_t,
  _swigc__p_std__vectorTint_t,
  _swigc__p_std__vectorTjafar__lines__CHAINE_p_t,
  _swigc__p_std__vectorTjafar__lines__LineSegment_t,
  _swigc__p_std__vectorTstd__vectorTCvPoint_t_t,
  _swigc__p_std__vectorTstd__vectorTint_t_t,
  _swigc__p_uint,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_lines(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mLines = rb_define_module("Jafar");
  mLines = rb_define_module_under(mLines, "Lines");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  cLinesException.klass = rb_define_class_under(mLines, "LinesException", ((swig_class *) SWIGTYPE_p_jafar__kernel__Exception->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__LinesException, (void *) &cLinesException);
  rb_define_alloc_func(cLinesException.klass, _wrap_LinesException_allocate);
  rb_define_method(cLinesException.klass, "initialize", VALUEFUNC(_wrap_new_LinesException), -1);
  rb_define_method(cLinesException.klass, "getExceptionId", VALUEFUNC(_wrap_LinesException_getExceptionId), -1);
  cLinesException.mark = 0;
  cLinesException.destroy = (void (*)(void *)) free_jafar_lines_LinesException;
  cLinesException.trackObjects = 0;
  
  id_to_symbol = rb_intern("id_to_symbol");
  
  rb_define_const(mLines, "HAVE_BOOST", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mLines, "HAVE_BOOST_SANDBOX", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mLines, "HAVE_LAPACK", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mLines, "HAVE_OPENCV", SWIG_From_int(static_cast< int >(1)));
  
  cLineSegment.klass = rb_define_class_under(mLines, "LineSegment", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__LineSegment, (void *) &cLineSegment);
  rb_define_alloc_func(cLineSegment.klass, _wrap_LineSegment_allocate);
  rb_define_method(cLineSegment.klass, "initialize", VALUEFUNC(_wrap_new_LineSegment), -1);
  rb_define_singleton_method(cLineSegment.klass, "calcSupportingLine", VALUEFUNC(_wrap_LineSegment_calcSupportingLine), -1);
  rb_define_singleton_method(cLineSegment.klass, "calcEndpointsOfSupportingLine", VALUEFUNC(_wrap_LineSegment_calcEndpointsOfSupportingLine), -1);
  rb_define_singleton_method(cLineSegment.klass, "mahaDistLines", VALUEFUNC(_wrap_LineSegment_mahaDistLines), -1);
  rb_define_method(cLineSegment.klass, "extractGreyscale", VALUEFUNC(_wrap_LineSegment_extractGreyscale), -1);
  rb_define_method(cLineSegment.klass, "extractGradientscale", VALUEFUNC(_wrap_LineSegment_extractGradientscale), -1);
  rb_define_method(cLineSegment.klass, "extractLaplacescale", VALUEFUNC(_wrap_LineSegment_extractLaplacescale), -1);
  rb_define_method(cLineSegment.klass, "setPoints", VALUEFUNC(_wrap_LineSegment_setPoints), -1);
  rb_define_method(cLineSegment.klass, "setNumberOfNeighbours", VALUEFUNC(_wrap_LineSegment_setNumberOfNeighbours), -1);
  rb_define_method(cLineSegment.klass, "assignContourPts", VALUEFUNC(_wrap_LineSegment_assignContourPts), -1);
  rb_define_method(cLineSegment.klass, "changePointOrder", VALUEFUNC(_wrap_LineSegment_changePointOrder), -1);
  rb_define_method(cLineSegment.klass, "orientLine", VALUEFUNC(_wrap_LineSegment_orientLine), -1);
  rb_define_method(cLineSegment.klass, "calcHistogramDescriptor", VALUEFUNC(_wrap_LineSegment_calcHistogramDescriptor), -1);
  rb_define_method(cLineSegment.klass, "calcGreyspaceDescriptor", VALUEFUNC(_wrap_LineSegment_calcGreyspaceDescriptor), -1);
  rb_define_singleton_method(cLineSegment.klass, "compareGreyspace", VALUEFUNC(_wrap_LineSegment_compareGreyspace), -1);
  rb_define_singleton_method(cLineSegment.klass, "compareAvLR", VALUEFUNC(_wrap_LineSegment_compareAvLR), -1);
  rb_define_method(cLineSegment.klass, "fitLine", VALUEFUNC(_wrap_LineSegment_fitLine), -1);
  rb_define_method(cLineSegment.klass, "fitLineCandidates", VALUEFUNC(_wrap_LineSegment_fitLineCandidates), -1);
  rb_define_method(cLineSegment.klass, "fitLineOrientation", VALUEFUNC(_wrap_LineSegment_fitLineOrientation), -1);
  rb_define_method(cLineSegment.klass, "searchGradMax", VALUEFUNC(_wrap_LineSegment_searchGradMax), -1);
  rb_define_method(cLineSegment.klass, "interpolateLineRansac", VALUEFUNC(_wrap_LineSegment_interpolateLineRansac), -1);
  rb_define_method(cLineSegment.klass, "interpolateLineGrowline", VALUEFUNC(_wrap_LineSegment_interpolateLineGrowline), -1);
  rb_define_singleton_method(cLineSegment.klass, "tryMergeLinesChiSq", VALUEFUNC(_wrap_LineSegment_tryMergeLinesChiSq), -1);
  rb_define_singleton_method(cLineSegment.klass, "mergeLinesProb", VALUEFUNC(_wrap_LineSegment_mergeLinesProb), -1);
  rb_define_singleton_method(cLineSegment.klass, "mergeLinesEP", VALUEFUNC(_wrap_LineSegment_mergeLinesEP), -1);
  rb_define_singleton_method(cLineSegment.klass, "sizeOfGap", VALUEFUNC(_wrap_LineSegment_sizeOfGap), -1);
  rb_define_method(cLineSegment.klass, "getEPPredictionByRhoThetaPrediction", VALUEFUNC(_wrap_LineSegment_getEPPredictionByRhoThetaPrediction), -1);
  rb_define_method(cLineSegment.klass, "growLineParallel", VALUEFUNC(_wrap_LineSegment_growLineParallel), -1);
  rb_define_method(cLineSegment.klass, "growLine", VALUEFUNC(_wrap_LineSegment_growLine), -1);
  rb_define_method(cLineSegment.klass, "drawLine", VALUEFUNC(_wrap_LineSegment_drawLine), -1);
  rb_define_method(cLineSegment.klass, "getX1", VALUEFUNC(_wrap_LineSegment_getX1), -1);
  rb_define_method(cLineSegment.klass, "getY1", VALUEFUNC(_wrap_LineSegment_getY1), -1);
  rb_define_method(cLineSegment.klass, "getX2", VALUEFUNC(_wrap_LineSegment_getX2), -1);
  rb_define_method(cLineSegment.klass, "getY2", VALUEFUNC(_wrap_LineSegment_getY2), -1);
  rb_define_method(cLineSegment.klass, "getMx", VALUEFUNC(_wrap_LineSegment_getMx), -1);
  rb_define_method(cLineSegment.klass, "getMy", VALUEFUNC(_wrap_LineSegment_getMy), -1);
  rb_define_method(cLineSegment.klass, "getAlpha", VALUEFUNC(_wrap_LineSegment_getAlpha), -1);
  rb_define_method(cLineSegment.klass, "getOAlpha", VALUEFUNC(_wrap_LineSegment_getOAlpha), -1);
  rb_define_method(cLineSegment.klass, "getEucLength", VALUEFUNC(_wrap_LineSegment_getEucLength), -1);
  rb_define_method(cLineSegment.klass, "isValid", VALUEFUNC(_wrap_LineSegment_isValid), -1);
  rb_define_method(cLineSegment.klass, "setValid", VALUEFUNC(_wrap_LineSegment_setValid), -1);
  rb_define_method(cLineSegment.klass, "setInvalid", VALUEFUNC(_wrap_LineSegment_setInvalid), -1);
  rb_define_method(cLineSegment.klass, "length=", VALUEFUNC(_wrap_LineSegment_length_set), -1);
  rb_define_method(cLineSegment.klass, "length", VALUEFUNC(_wrap_LineSegment_length_get), -1);
  rb_define_method(cLineSegment.klass, "color=", VALUEFUNC(_wrap_LineSegment_color_set), -1);
  rb_define_method(cLineSegment.klass, "color", VALUEFUNC(_wrap_LineSegment_color_get), -1);
  rb_define_method(cLineSegment.klass, "greyscale=", VALUEFUNC(_wrap_LineSegment_greyscale_set), -1);
  rb_define_method(cLineSegment.klass, "greyscale", VALUEFUNC(_wrap_LineSegment_greyscale_get), -1);
  rb_define_method(cLineSegment.klass, "gradientscale=", VALUEFUNC(_wrap_LineSegment_gradientscale_set), -1);
  rb_define_method(cLineSegment.klass, "gradientscale", VALUEFUNC(_wrap_LineSegment_gradientscale_get), -1);
  rb_define_method(cLineSegment.klass, "laplacescale=", VALUEFUNC(_wrap_LineSegment_laplacescale_set), -1);
  rb_define_method(cLineSegment.klass, "laplacescale", VALUEFUNC(_wrap_LineSegment_laplacescale_get), -1);
  rb_define_method(cLineSegment.klass, "numberOfNeighbours=", VALUEFUNC(_wrap_LineSegment_numberOfNeighbours_set), -1);
  rb_define_method(cLineSegment.klass, "numberOfNeighbours", VALUEFUNC(_wrap_LineSegment_numberOfNeighbours_get), -1);
  rb_define_method(cLineSegment.klass, "parallels=", VALUEFUNC(_wrap_LineSegment_parallels_set), -1);
  rb_define_method(cLineSegment.klass, "parallels", VALUEFUNC(_wrap_LineSegment_parallels_get), -1);
  rb_define_method(cLineSegment.klass, "histogramB=", VALUEFUNC(_wrap_LineSegment_histogramB_set), -1);
  rb_define_method(cLineSegment.klass, "histogramB", VALUEFUNC(_wrap_LineSegment_histogramB_get), -1);
  rb_define_method(cLineSegment.klass, "histogramD=", VALUEFUNC(_wrap_LineSegment_histogramD_set), -1);
  rb_define_method(cLineSegment.klass, "histogramD", VALUEFUNC(_wrap_LineSegment_histogramD_get), -1);
  rb_define_method(cLineSegment.klass, "greyspace=", VALUEFUNC(_wrap_LineSegment_greyspace_set), -1);
  rb_define_method(cLineSegment.klass, "greyspace", VALUEFUNC(_wrap_LineSegment_greyspace_get), -1);
  rb_define_method(cLineSegment.klass, "greyspaceL=", VALUEFUNC(_wrap_LineSegment_greyspaceL_set), -1);
  rb_define_method(cLineSegment.klass, "greyspaceL", VALUEFUNC(_wrap_LineSegment_greyspaceL_get), -1);
  rb_define_method(cLineSegment.klass, "greyspaceR=", VALUEFUNC(_wrap_LineSegment_greyspaceR_set), -1);
  rb_define_method(cLineSegment.klass, "greyspaceR", VALUEFUNC(_wrap_LineSegment_greyspaceR_get), -1);
  rb_define_method(cLineSegment.klass, "avL=", VALUEFUNC(_wrap_LineSegment_avL_set), -1);
  rb_define_method(cLineSegment.klass, "avL", VALUEFUNC(_wrap_LineSegment_avL_get), -1);
  rb_define_method(cLineSegment.klass, "avR=", VALUEFUNC(_wrap_LineSegment_avR_set), -1);
  rb_define_method(cLineSegment.klass, "avR", VALUEFUNC(_wrap_LineSegment_avR_get), -1);
  rb_define_method(cLineSegment.klass, "varL=", VALUEFUNC(_wrap_LineSegment_varL_set), -1);
  rb_define_method(cLineSegment.klass, "varL", VALUEFUNC(_wrap_LineSegment_varL_get), -1);
  rb_define_method(cLineSegment.klass, "varR=", VALUEFUNC(_wrap_LineSegment_varR_set), -1);
  rb_define_method(cLineSegment.klass, "varR", VALUEFUNC(_wrap_LineSegment_varR_get), -1);
  rb_define_method(cLineSegment.klass, "polarD=", VALUEFUNC(_wrap_LineSegment_polarD_set), -1);
  rb_define_method(cLineSegment.klass, "polarD", VALUEFUNC(_wrap_LineSegment_polarD_get), -1);
  rb_define_method(cLineSegment.klass, "polarAlpha=", VALUEFUNC(_wrap_LineSegment_polarAlpha_set), -1);
  rb_define_method(cLineSegment.klass, "polarAlpha", VALUEFUNC(_wrap_LineSegment_polarAlpha_get), -1);
  rb_define_method(cLineSegment.klass, "covDD=", VALUEFUNC(_wrap_LineSegment_covDD_set), -1);
  rb_define_method(cLineSegment.klass, "covDD", VALUEFUNC(_wrap_LineSegment_covDD_get), -1);
  rb_define_method(cLineSegment.klass, "covAA=", VALUEFUNC(_wrap_LineSegment_covAA_set), -1);
  rb_define_method(cLineSegment.klass, "covAA", VALUEFUNC(_wrap_LineSegment_covAA_get), -1);
  rb_define_method(cLineSegment.klass, "covAD=", VALUEFUNC(_wrap_LineSegment_covAD_set), -1);
  rb_define_method(cLineSegment.klass, "covAD", VALUEFUNC(_wrap_LineSegment_covAD_get), -1);
  rb_define_method(cLineSegment.klass, "covXX=", VALUEFUNC(_wrap_LineSegment_covXX_set), -1);
  rb_define_method(cLineSegment.klass, "covXX", VALUEFUNC(_wrap_LineSegment_covXX_get), -1);
  rb_define_method(cLineSegment.klass, "covXY=", VALUEFUNC(_wrap_LineSegment_covXY_set), -1);
  rb_define_method(cLineSegment.klass, "covXY", VALUEFUNC(_wrap_LineSegment_covXY_get), -1);
  rb_define_method(cLineSegment.klass, "covYY=", VALUEFUNC(_wrap_LineSegment_covYY_set), -1);
  rb_define_method(cLineSegment.klass, "covYY", VALUEFUNC(_wrap_LineSegment_covYY_get), -1);
  rb_define_method(cLineSegment.klass, "covAlpha=", VALUEFUNC(_wrap_LineSegment_covAlpha_set), -1);
  rb_define_method(cLineSegment.klass, "covAlpha", VALUEFUNC(_wrap_LineSegment_covAlpha_get), -1);
  rb_define_method(cLineSegment.klass, "covXA=", VALUEFUNC(_wrap_LineSegment_covXA_set), -1);
  rb_define_method(cLineSegment.klass, "covXA", VALUEFUNC(_wrap_LineSegment_covXA_get), -1);
  rb_define_method(cLineSegment.klass, "covYA=", VALUEFUNC(_wrap_LineSegment_covYA_set), -1);
  rb_define_method(cLineSegment.klass, "covYA", VALUEFUNC(_wrap_LineSegment_covYA_get), -1);
  rb_define_method(cLineSegment.klass, "covXX_M=", VALUEFUNC(_wrap_LineSegment_covXX_M_set), -1);
  rb_define_method(cLineSegment.klass, "covXX_M", VALUEFUNC(_wrap_LineSegment_covXX_M_get), -1);
  rb_define_method(cLineSegment.klass, "covXY_M=", VALUEFUNC(_wrap_LineSegment_covXY_M_set), -1);
  rb_define_method(cLineSegment.klass, "covXY_M", VALUEFUNC(_wrap_LineSegment_covXY_M_get), -1);
  rb_define_method(cLineSegment.klass, "covYY_M=", VALUEFUNC(_wrap_LineSegment_covYY_M_set), -1);
  rb_define_method(cLineSegment.klass, "covYY_M", VALUEFUNC(_wrap_LineSegment_covYY_M_get), -1);
  rb_define_method(cLineSegment.klass, "covXA_M=", VALUEFUNC(_wrap_LineSegment_covXA_M_set), -1);
  rb_define_method(cLineSegment.klass, "covXA_M", VALUEFUNC(_wrap_LineSegment_covXA_M_get), -1);
  rb_define_method(cLineSegment.klass, "covYA_M=", VALUEFUNC(_wrap_LineSegment_covYA_M_set), -1);
  rb_define_method(cLineSegment.klass, "covYA_M", VALUEFUNC(_wrap_LineSegment_covYA_M_get), -1);
  rb_define_method(cLineSegment.klass, "u=", VALUEFUNC(_wrap_LineSegment_u_set), -1);
  rb_define_method(cLineSegment.klass, "u", VALUEFUNC(_wrap_LineSegment_u_get), -1);
  rb_define_method(cLineSegment.klass, "v=", VALUEFUNC(_wrap_LineSegment_v_set), -1);
  rb_define_method(cLineSegment.klass, "v", VALUEFUNC(_wrap_LineSegment_v_get), -1);
  rb_define_method(cLineSegment.klass, "id=", VALUEFUNC(_wrap_LineSegment_id_set), -1);
  rb_define_method(cLineSegment.klass, "id", VALUEFUNC(_wrap_LineSegment_id_get), -1);
  rb_define_method(cLineSegment.klass, "contourPoints=", VALUEFUNC(_wrap_LineSegment_contourPoints_set), -1);
  rb_define_method(cLineSegment.klass, "contourPoints", VALUEFUNC(_wrap_LineSegment_contourPoints_get), -1);
  rb_define_method(cLineSegment.klass, "param1=", VALUEFUNC(_wrap_LineSegment_param1_set), -1);
  rb_define_method(cLineSegment.klass, "param1", VALUEFUNC(_wrap_LineSegment_param1_get), -1);
  rb_define_method(cLineSegment.klass, "parameters=", VALUEFUNC(_wrap_LineSegment_parameters_set), -1);
  rb_define_method(cLineSegment.klass, "parameters", VALUEFUNC(_wrap_LineSegment_parameters_get), -1);
  rb_define_method(cLineSegment.klass, "predictor=", VALUEFUNC(_wrap_LineSegment_predictor_set), -1);
  rb_define_method(cLineSegment.klass, "predictor", VALUEFUNC(_wrap_LineSegment_predictor_get), -1);
  rb_define_method(cLineSegment.klass, "setPrediction", VALUEFUNC(_wrap_LineSegment_setPrediction), -1);
  rb_define_method(cLineSegment.klass, "rhoPred=", VALUEFUNC(_wrap_LineSegment_rhoPred_set), -1);
  rb_define_method(cLineSegment.klass, "rhoPred", VALUEFUNC(_wrap_LineSegment_rhoPred_get), -1);
  rb_define_method(cLineSegment.klass, "thetaPred=", VALUEFUNC(_wrap_LineSegment_thetaPred_set), -1);
  rb_define_method(cLineSegment.klass, "thetaPred", VALUEFUNC(_wrap_LineSegment_thetaPred_get), -1);
  rb_define_method(cLineSegment.klass, "covRRpred=", VALUEFUNC(_wrap_LineSegment_covRRpred_set), -1);
  rb_define_method(cLineSegment.klass, "covRRpred", VALUEFUNC(_wrap_LineSegment_covRRpred_get), -1);
  rb_define_method(cLineSegment.klass, "covRTpred=", VALUEFUNC(_wrap_LineSegment_covRTpred_set), -1);
  rb_define_method(cLineSegment.klass, "covRTpred", VALUEFUNC(_wrap_LineSegment_covRTpred_get), -1);
  rb_define_method(cLineSegment.klass, "covTTpred=", VALUEFUNC(_wrap_LineSegment_covTTpred_set), -1);
  rb_define_method(cLineSegment.klass, "covTTpred", VALUEFUNC(_wrap_LineSegment_covTTpred_get), -1);
  rb_define_method(cLineSegment.klass, "predFlag=", VALUEFUNC(_wrap_LineSegment_predFlag_set), -1);
  rb_define_method(cLineSegment.klass, "predFlag", VALUEFUNC(_wrap_LineSegment_predFlag_get), -1);
  cLineSegment.mark = 0;
  cLineSegment.destroy = (void (*)(void *)) free_jafar_lines_LineSegment;
  cLineSegment.trackObjects = 0;
  
  cLineSegmentSet.klass = rb_define_class_under(mLines, "LineSegmentSet", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__LineSegmentSet, (void *) &cLineSegmentSet);
  rb_define_alloc_func(cLineSegmentSet.klass, _wrap_LineSegmentSet_allocate);
  rb_define_method(cLineSegmentSet.klass, "initialize", VALUEFUNC(_wrap_new_LineSegmentSet), -1);
  rb_define_method(cLineSegmentSet.klass, "eraseInvalid", VALUEFUNC(_wrap_LineSegmentSet_eraseInvalid), -1);
  rb_define_method(cLineSegmentSet.klass, "clearPredFlags", VALUEFUNC(_wrap_LineSegmentSet_clearPredFlags), -1);
  rb_define_method(cLineSegmentSet.klass, "clearParameters", VALUEFUNC(_wrap_LineSegmentSet_clearParameters), -1);
  rb_define_method(cLineSegmentSet.klass, "addLine", VALUEFUNC(_wrap_LineSegmentSet_addLine), -1);
  rb_define_method(cLineSegmentSet.klass, "clear", VALUEFUNC(_wrap_LineSegmentSet_clear), -1);
  rb_define_method(cLineSegmentSet.klass, "print", VALUEFUNC(_wrap_LineSegmentSet_print), -1);
  rb_define_method(cLineSegmentSet.klass, "extractGreyscales", VALUEFUNC(_wrap_LineSegmentSet_extractGreyscales), -1);
  rb_define_method(cLineSegmentSet.klass, "extractGradientscales", VALUEFUNC(_wrap_LineSegmentSet_extractGradientscales), -1);
  rb_define_method(cLineSegmentSet.klass, "extractLaplacescales", VALUEFUNC(_wrap_LineSegmentSet_extractLaplacescales), -1);
  rb_define_method(cLineSegmentSet.klass, "changeNumberOfNeighbours", VALUEFUNC(_wrap_LineSegmentSet_changeNumberOfNeighbours), -1);
  rb_define_method(cLineSegmentSet.klass, "calcHistogramDescriptor", VALUEFUNC(_wrap_LineSegmentSet_calcHistogramDescriptor), -1);
  rb_define_method(cLineSegmentSet.klass, "calcGreyspaceDescriptor", VALUEFUNC(_wrap_LineSegmentSet_calcGreyspaceDescriptor), -1);
  rb_define_method(cLineSegmentSet.klass, "orientLines", VALUEFUNC(_wrap_LineSegmentSet_orientLines), -1);
  rb_define_method(cLineSegmentSet.klass, "growLinesParallel", VALUEFUNC(_wrap_LineSegmentSet_growLinesParallel), -1);
  rb_define_method(cLineSegmentSet.klass, "growLines", VALUEFUNC(_wrap_LineSegmentSet_growLines), -1);
  rb_define_method(cLineSegmentSet.klass, "fitLines", VALUEFUNC(_wrap_LineSegmentSet_fitLines), -1);
  rb_define_method(cLineSegmentSet.klass, "fitLinesOrientation", VALUEFUNC(_wrap_LineSegmentSet_fitLinesOrientation), -1);
  rb_define_singleton_method(cLineSegmentSet.klass, "clone", VALUEFUNC(_wrap_LineSegmentSet_clone), -1);
  rb_define_method(cLineSegmentSet.klass, "lineSegments=", VALUEFUNC(_wrap_LineSegmentSet_lineSegments_set), -1);
  rb_define_method(cLineSegmentSet.klass, "lineSegments", VALUEFUNC(_wrap_LineSegmentSet_lineSegments_get), -1);
  rb_define_method(cLineSegmentSet.klass, "size", VALUEFUNC(_wrap_LineSegmentSet_size), -1);
  rb_define_method(cLineSegmentSet.klass, "ls", VALUEFUNC(_wrap_LineSegmentSet_ls), -1);
  cLineSegmentSet.mark = 0;
  cLineSegmentSet.destroy = (void (*)(void *)) free_jafar_lines_LineSegmentSet;
  cLineSegmentSet.trackObjects = 0;
  rb_define_const(mLines, "GLOB_LOC_SEARCH", SWIG_From_int(static_cast< int >(jafar::lines::GLOB_LOC_SEARCH)));
  rb_define_const(mLines, "GLOB_MATCHING", SWIG_From_int(static_cast< int >(jafar::lines::GLOB_MATCHING)));
  
  cLsTracker.klass = rb_define_class_under(mLines, "LsTracker", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__LsTracker, (void *) &cLsTracker);
  rb_define_alloc_func(cLsTracker.klass, _wrap_LsTracker_allocate);
  rb_define_method(cLsTracker.klass, "initialize", VALUEFUNC(_wrap_new_LsTracker), -1);
  rb_define_method(cLsTracker.klass, "procTracking", VALUEFUNC(_wrap_LsTracker_procTracking), -1);
  rb_define_method(cLsTracker.klass, "trackingScheme6", VALUEFUNC(_wrap_LsTracker_trackingScheme6), -1);
  rb_define_method(cLsTracker.klass, "trackingScheme5", VALUEFUNC(_wrap_LsTracker_trackingScheme5), -1);
  rb_define_method(cLsTracker.klass, "trackingScheme4", VALUEFUNC(_wrap_LsTracker_trackingScheme4), -1);
  rb_define_method(cLsTracker.klass, "trackingScheme3", VALUEFUNC(_wrap_LsTracker_trackingScheme3), -1);
  rb_define_method(cLsTracker.klass, "trackingScheme2", VALUEFUNC(_wrap_LsTracker_trackingScheme2), -1);
  rb_define_method(cLsTracker.klass, "trackingScheme1", VALUEFUNC(_wrap_LsTracker_trackingScheme1), -1);
  rb_define_method(cLsTracker.klass, "setCannyPara", VALUEFUNC(_wrap_LsTracker_setCannyPara), -1);
  rb_define_method(cLsTracker.klass, "setNextId", VALUEFUNC(_wrap_LsTracker_setNextId), -1);
  rb_define_method(cLsTracker.klass, "setMinLength", VALUEFUNC(_wrap_LsTracker_setMinLength), -1);
  cLsTracker.mark = 0;
  cLsTracker.destroy = (void (*)(void *)) free_jafar_lines_LsTracker;
  cLsTracker.trackObjects = 0;
  rb_define_const(mLines, "FAST_OLD_LINE_MATCH_ACCESS", SWIG_From_int(static_cast< int >(jafar::lines::FAST_OLD_LINE_MATCH_ACCESS)));
  rb_define_const(mLines, "FAST_MATCH_ACCESS", SWIG_From_int(static_cast< int >(jafar::lines::FAST_MATCH_ACCESS)));
  rb_define_const(mLines, "BOTH_MATCH_ACCESS_TYPES", SWIG_From_int(static_cast< int >(jafar::lines::BOTH_MATCH_ACCESS_TYPES)));
  
  cMatchStatistic.klass = rb_define_class_under(mLines, "MatchStatistic", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__MatchStatistic, (void *) &cMatchStatistic);
  rb_define_alloc_func(cMatchStatistic.klass, _wrap_MatchStatistic_allocate);
  rb_define_method(cMatchStatistic.klass, "initialize", VALUEFUNC(_wrap_new_MatchStatistic), -1);
  rb_define_method(cMatchStatistic.klass, "right=", VALUEFUNC(_wrap_MatchStatistic_right_set), -1);
  rb_define_method(cMatchStatistic.klass, "right", VALUEFUNC(_wrap_MatchStatistic_right_get), -1);
  rb_define_method(cMatchStatistic.klass, "wrong=", VALUEFUNC(_wrap_MatchStatistic_wrong_set), -1);
  rb_define_method(cMatchStatistic.klass, "wrong", VALUEFUNC(_wrap_MatchStatistic_wrong_get), -1);
  rb_define_method(cMatchStatistic.klass, "notFound=", VALUEFUNC(_wrap_MatchStatistic_notFound_set), -1);
  rb_define_method(cMatchStatistic.klass, "notFound", VALUEFUNC(_wrap_MatchStatistic_notFound_get), -1);
  rb_define_method(cMatchStatistic.klass, "print", VALUEFUNC(_wrap_MatchStatistic_print), -1);
  cMatchStatistic.mark = 0;
  cMatchStatistic.destroy = (void (*)(void *)) free_jafar_lines_MatchStatistic;
  cMatchStatistic.trackObjects = 0;
  
  cMatchingSet.klass = rb_define_class_under(mLines, "MatchingSet", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__MatchingSet, (void *) &cMatchingSet);
  rb_define_alloc_func(cMatchingSet.klass, _wrap_MatchingSet_allocate);
  rb_define_method(cMatchingSet.klass, "initialize", VALUEFUNC(_wrap_new_MatchingSet), -1);
  rb_define_method(cMatchingSet.klass, "clear", VALUEFUNC(_wrap_MatchingSet_clear), -1);
  rb_define_singleton_method(cMatchingSet.klass, "compareMatchingSets", VALUEFUNC(_wrap_MatchingSet_compareMatchingSets), -1);
  rb_define_singleton_method(cMatchingSet.klass, "clone", VALUEFUNC(_wrap_MatchingSet_clone), -1);
  rb_define_method(cMatchingSet.klass, "addMatching", VALUEFUNC(_wrap_MatchingSet_addMatching), -1);
  rb_define_method(cMatchingSet.klass, "print", VALUEFUNC(_wrap_MatchingSet_print), -1);
  rb_define_method(cMatchingSet.klass, "searchMatching", VALUEFUNC(_wrap_MatchingSet_searchMatching), -1);
  rb_define_method(cMatchingSet.klass, "getMaxInd", VALUEFUNC(_wrap_MatchingSet_getMaxInd), -1);
  rb_define_method(cMatchingSet.klass, "map=", VALUEFUNC(_wrap_MatchingSet_map_set), -1);
  rb_define_method(cMatchingSet.klass, "map", VALUEFUNC(_wrap_MatchingSet_map_get), -1);
  rb_define_method(cMatchingSet.klass, "oldIdx=", VALUEFUNC(_wrap_MatchingSet_oldIdx_set), -1);
  rb_define_method(cMatchingSet.klass, "oldIdx", VALUEFUNC(_wrap_MatchingSet_oldIdx_get), -1);
  rb_define_method(cMatchingSet.klass, "newIdx=", VALUEFUNC(_wrap_MatchingSet_newIdx_set), -1);
  rb_define_method(cMatchingSet.klass, "newIdx", VALUEFUNC(_wrap_MatchingSet_newIdx_get), -1);
  cMatchingSet.mark = 0;
  cMatchingSet.destroy = (void (*)(void *)) free_jafar_lines_MatchingSet;
  cMatchingSet.trackObjects = 0;
  rb_define_const(mLines, "MAXPOINTS", SWIG_From_int(static_cast< int >(2000)));
  rb_define_const(mLines, "TRUE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mLines, "FALSE", SWIG_From_int(static_cast< int >(0)));
  
  cCHAINE.klass = rb_define_class_under(mLines, "CHAINE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__CHAINE, (void *) &cCHAINE);
  rb_define_alloc_func(cCHAINE.klass, _wrap_CHAINE_allocate);
  rb_define_method(cCHAINE.klass, "initialize", VALUEFUNC(_wrap_new_CHAINE), -1);
  rb_define_method(cCHAINE.klass, "num=", VALUEFUNC(_wrap_CHAINE_num_set), -1);
  rb_define_method(cCHAINE.klass, "num", VALUEFUNC(_wrap_CHAINE_num_get), -1);
  rb_define_method(cCHAINE.klass, "flag=", VALUEFUNC(_wrap_CHAINE_flag_set), -1);
  rb_define_method(cCHAINE.klass, "flag", VALUEFUNC(_wrap_CHAINE_flag_get), -1);
  rb_define_method(cCHAINE.klass, "npoints=", VALUEFUNC(_wrap_CHAINE_npoints_set), -1);
  rb_define_method(cCHAINE.klass, "npoints", VALUEFUNC(_wrap_CHAINE_npoints_get), -1);
  rb_define_method(cCHAINE.klass, "local=", VALUEFUNC(_wrap_CHAINE_local_set), -1);
  rb_define_method(cCHAINE.klass, "local", VALUEFUNC(_wrap_CHAINE_local_get), -1);
  rb_define_method(cCHAINE.klass, "x=", VALUEFUNC(_wrap_CHAINE_x_set), -1);
  rb_define_method(cCHAINE.klass, "x", VALUEFUNC(_wrap_CHAINE_x_get), -1);
  rb_define_method(cCHAINE.klass, "y=", VALUEFUNC(_wrap_CHAINE_y_set), -1);
  rb_define_method(cCHAINE.klass, "y", VALUEFUNC(_wrap_CHAINE_y_get), -1);
  cCHAINE.mark = 0;
  cCHAINE.destroy = (void (*)(void *)) free_jafar_lines_CHAINE;
  cCHAINE.trackObjects = 0;
  rb_define_const(mLines, "CT_FERMEE", SWIG_From_int(static_cast< int >(0x01)));
  rb_define_const(mLines, "Typchaine", SWIG_From_int(static_cast< int >(120)));
  rb_define_const(mLines, "Cf_Ctfic", SWIG_From_int(static_cast< int >(155)));
  
  cIMCT.klass = rb_define_class_under(mLines, "IMCT", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__IMCT, (void *) &cIMCT);
  rb_define_alloc_func(cIMCT.klass, _wrap_IMCT_allocate);
  rb_define_method(cIMCT.klass, "initialize", VALUEFUNC(_wrap_new_IMCT), -1);
  rb_define_method(cIMCT.klass, "liste=", VALUEFUNC(_wrap_IMCT_liste_set), -1);
  rb_define_method(cIMCT.klass, "liste", VALUEFUNC(_wrap_IMCT_liste_get), -1);
  rb_define_method(cIMCT.klass, "nchains=", VALUEFUNC(_wrap_IMCT_nchains_set), -1);
  rb_define_method(cIMCT.klass, "nchains", VALUEFUNC(_wrap_IMCT_nchains_get), -1);
  rb_define_method(cIMCT.klass, "di=", VALUEFUNC(_wrap_IMCT_di_set), -1);
  rb_define_method(cIMCT.klass, "di", VALUEFUNC(_wrap_IMCT_di_get), -1);
  rb_define_method(cIMCT.klass, "dj=", VALUEFUNC(_wrap_IMCT_dj_set), -1);
  rb_define_method(cIMCT.klass, "dj", VALUEFUNC(_wrap_IMCT_dj_get), -1);
  cIMCT.mark = 0;
  cIMCT.destroy = (void (*)(void *)) free_jafar_lines_IMCT;
  cIMCT.trackObjects = 0;
  rb_define_module_function(mLines, "ExtractContours1", VALUEFUNC(_wrap_ExtractContours1), -1);
  rb_define_module_function(mLines, "seuilhy", VALUEFUNC(_wrap_seuilhy), -1);
  rb_define_module_function(mLines, "confcont", VALUEFUNC(_wrap_confcont), -1);
  rb_define_module_function(mLines, "get_direction", VALUEFUNC(_wrap_get_direction), -1);
  rb_define_module_function(mLines, "destroy_leftright", VALUEFUNC(_wrap_destroy_leftright), -1);
  rb_define_module_function(mLines, "initChain", VALUEFUNC(_wrap_initChain), -1);
  rb_define_module_function(mLines, "contourPtTest", VALUEFUNC(_wrap_contourPtTest), -1);
  rb_define_module_function(mLines, "distPointVector", VALUEFUNC(_wrap_distPointVector), -1);
  rb_define_module_function(mLines, "signedDistPointVector", VALUEFUNC(_wrap_signedDistPointVector), -1);
  rb_define_module_function(mLines, "distPtPt", VALUEFUNC(_wrap_distPtPt), -1);
  rb_define_module_function(mLines, "calcGradientImage", VALUEFUNC(_wrap_calcGradientImage), -1);
  rb_define_module_function(mLines, "calcXYGradientImages", VALUEFUNC(_wrap_calcXYGradientImages), -1);
  rb_define_module_function(mLines, "calcOrientedGradientImage", VALUEFUNC(_wrap_calcOrientedGradientImage), -1);
  rb_define_module_function(mLines, "validLine", VALUEFUNC(_wrap_validLine), -1);
  rb_define_module_function(mLines, "calcIntersec", VALUEFUNC(_wrap_calcIntersec), -1);
  rb_define_module_function(mLines, "startTimeMeasure", VALUEFUNC(_wrap_startTimeMeasure), -1);
  rb_define_module_function(mLines, "stopTimeMeasure", VALUEFUNC(_wrap_stopTimeMeasure), -1);
  
  cHistogram.klass = rb_define_class_under(mLines, "Histogram", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__Histogram, (void *) &cHistogram);
  rb_define_alloc_func(cHistogram.klass, _wrap_Histogram_allocate);
  rb_define_method(cHistogram.klass, "initialize", VALUEFUNC(_wrap_new_Histogram), -1);
  rb_define_method(cHistogram.klass, "initHisto", VALUEFUNC(_wrap_Histogram_initHisto), -1);
  rb_define_method(cHistogram.klass, "addVectorInfo", VALUEFUNC(_wrap_Histogram_addVectorInfo), -1);
  rb_define_method(cHistogram.klass, "addImageInfo", VALUEFUNC(_wrap_Histogram_addImageInfo), -1);
  rb_define_method(cHistogram.klass, "print", VALUEFUNC(_wrap_Histogram_print), -1);
  rb_define_method(cHistogram.klass, "isValid", VALUEFUNC(_wrap_Histogram_isValid), -1);
  rb_define_method(cHistogram.klass, "histo=", VALUEFUNC(_wrap_Histogram_histo_set), -1);
  rb_define_method(cHistogram.klass, "histo", VALUEFUNC(_wrap_Histogram_histo_get), -1);
  cHistogram.mark = 0;
  cHistogram.destroy = (void (*)(void *)) free_jafar_lines_Histogram;
  cHistogram.trackObjects = 0;
  
  cLsExtractor.klass = rb_define_class_under(mLines, "LsExtractor", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__LsExtractor, (void *) &cLsExtractor);
  rb_define_alloc_func(cLsExtractor.klass, _wrap_LsExtractor_allocate);
  rb_define_method(cLsExtractor.klass, "initialize", VALUEFUNC(_wrap_new_LsExtractor), -1);
  rb_define_method(cLsExtractor.klass, "procCanny", VALUEFUNC(_wrap_LsExtractor_procCanny), -1);
  rb_define_singleton_method(cLsExtractor.klass, "procCannySt", VALUEFUNC(_wrap_LsExtractor_procCannySt), -1);
  rb_define_method(cLsExtractor.klass, "extractLineSegments", VALUEFUNC(_wrap_LsExtractor_extractLineSegments), -1);
  rb_define_singleton_method(cLsExtractor.klass, "extractLineSegmentsSt", VALUEFUNC(_wrap_LsExtractor_extractLineSegmentsSt), -1);
  rb_define_method(cLsExtractor.klass, "procHough", VALUEFUNC(_wrap_LsExtractor_procHough), -1);
  rb_define_method(cLsExtractor.klass, "procCvFindContour", VALUEFUNC(_wrap_LsExtractor_procCvFindContour), -1);
  rb_define_singleton_method(cLsExtractor.klass, "findLinesDP", VALUEFUNC(_wrap_LsExtractor_findLinesDP), -1);
  rb_define_singleton_method(cLsExtractor.klass, "findLinesCalife", VALUEFUNC(_wrap_LsExtractor_findLinesCalife), -1);
  rb_define_singleton_method(cLsExtractor.klass, "dp", VALUEFUNC(_wrap_LsExtractor_dp), -1);
  rb_define_method(cLsExtractor.klass, "setCannyLowerThresh", VALUEFUNC(_wrap_LsExtractor_setCannyLowerThresh), -1);
  rb_define_method(cLsExtractor.klass, "setCannyHigherThresh", VALUEFUNC(_wrap_LsExtractor_setCannyHigherThresh), -1);
  rb_define_method(cLsExtractor.klass, "setCannyAp", VALUEFUNC(_wrap_LsExtractor_setCannyAp), -1);
  rb_define_method(cLsExtractor.klass, "setCannyPara", VALUEFUNC(_wrap_LsExtractor_setCannyPara), -1);
  rb_define_method(cLsExtractor.klass, "setHoughMethod", VALUEFUNC(_wrap_LsExtractor_setHoughMethod), -1);
  rb_define_method(cLsExtractor.klass, "setHoughRho", VALUEFUNC(_wrap_LsExtractor_setHoughRho), -1);
  rb_define_method(cLsExtractor.klass, "setHoughTheta", VALUEFUNC(_wrap_LsExtractor_setHoughTheta), -1);
  rb_define_method(cLsExtractor.klass, "setHoughThreshold", VALUEFUNC(_wrap_LsExtractor_setHoughThreshold), -1);
  rb_define_method(cLsExtractor.klass, "setHoughParam1", VALUEFUNC(_wrap_LsExtractor_setHoughParam1), -1);
  rb_define_method(cLsExtractor.klass, "setHoughParam2", VALUEFUNC(_wrap_LsExtractor_setHoughParam2), -1);
  rb_define_method(cLsExtractor.klass, "setHoughPara", VALUEFUNC(_wrap_LsExtractor_setHoughPara), -1);
  cLsExtractor.mark = 0;
  cLsExtractor.destroy = (void (*)(void *)) free_jafar_lines_LsExtractor;
  cLsExtractor.trackObjects = 0;
  rb_define_const(mLines, "MIDPOINT_X_Y", SWIG_From_int(static_cast< int >(jafar::lines::MIDPOINT_X_Y)));
  rb_define_const(mLines, "POLAR_COORD", SWIG_From_int(static_cast< int >(jafar::lines::POLAR_COORD)));
  rb_define_const(mLines, "ONLY_PERP_MOTION", SWIG_From_int(static_cast< int >(jafar::lines::ONLY_PERP_MOTION)));
  rb_define_const(mLines, "PERP_MIDPOINT_PROJ", SWIG_From_int(static_cast< int >(jafar::lines::PERP_MIDPOINT_PROJ)));
  
  cLsPredictor2D.klass = rb_define_class_under(mLines, "LsPredictor2D", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__LsPredictor2D, (void *) &cLsPredictor2D);
  rb_define_alloc_func(cLsPredictor2D.klass, _wrap_LsPredictor2D_allocate);
  rb_define_method(cLsPredictor2D.klass, "initialize", VALUEFUNC(_wrap_new_LsPredictor2D), -1);
  rb_define_method(cLsPredictor2D.klass, "initPredictor", VALUEFUNC(_wrap_LsPredictor2D_initPredictor), -1);
  rb_define_method(cLsPredictor2D.klass, "updatePredictor", VALUEFUNC(_wrap_LsPredictor2D_updatePredictor), -1);
  rb_define_method(cLsPredictor2D.klass, "getPredictionEP", VALUEFUNC(_wrap_LsPredictor2D_getPredictionEP), -1);
  rb_define_method(cLsPredictor2D.klass, "benchmarkTest", VALUEFUNC(_wrap_LsPredictor2D_benchmarkTest), -1);
  cLsPredictor2D.mark = 0;
  cLsPredictor2D.destroy = (void (*)(void *)) free_jafar_lines_LsPredictor2D;
  cLsPredictor2D.trackObjects = 0;
  
  cConstPositionKF.klass = rb_define_class_under(mLines, "ConstPositionKF", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__ConstPositionKF, (void *) &cConstPositionKF);
  rb_define_alloc_func(cConstPositionKF.klass, _wrap_ConstPositionKF_allocate);
  rb_define_method(cConstPositionKF.klass, "initialize", VALUEFUNC(_wrap_new_ConstPositionKF), -1);
  rb_define_method(cConstPositionKF.klass, "initKF", VALUEFUNC(_wrap_ConstPositionKF_initKF), -1);
  rb_define_method(cConstPositionKF.klass, "updateKF", VALUEFUNC(_wrap_ConstPositionKF_updateKF), -1);
  rb_define_method(cConstPositionKF.klass, "getPred", VALUEFUNC(_wrap_ConstPositionKF_getPred), -1);
  rb_define_method(cConstPositionKF.klass, "getPosPred", VALUEFUNC(_wrap_ConstPositionKF_getPosPred), -1);
  rb_define_method(cConstPositionKF.klass, "getPosVar", VALUEFUNC(_wrap_ConstPositionKF_getPosVar), -1);
  cConstPositionKF.mark = 0;
  cConstPositionKF.destroy = (void (*)(void *)) free_jafar_lines_ConstPositionKF;
  cConstPositionKF.trackObjects = 0;
  
  cConstVelocityKF.klass = rb_define_class_under(mLines, "ConstVelocityKF", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_jafar__lines__ConstVelocityKF, (void *) &cConstVelocityKF);
  rb_define_alloc_func(cConstVelocityKF.klass, _wrap_ConstVelocityKF_allocate);
  rb_define_method(cConstVelocityKF.klass, "initialize", VALUEFUNC(_wrap_new_ConstVelocityKF), -1);
  rb_define_method(cConstVelocityKF.klass, "initKF", VALUEFUNC(_wrap_ConstVelocityKF_initKF), -1);
  rb_define_method(cConstVelocityKF.klass, "updateKF", VALUEFUNC(_wrap_ConstVelocityKF_updateKF), -1);
  rb_define_method(cConstVelocityKF.klass, "getPred", VALUEFUNC(_wrap_ConstVelocityKF_getPred), -1);
  rb_define_method(cConstVelocityKF.klass, "getPosPred", VALUEFUNC(_wrap_ConstVelocityKF_getPosPred), -1);
  rb_define_method(cConstVelocityKF.klass, "getPosVar", VALUEFUNC(_wrap_ConstVelocityKF_getPosVar), -1);
  rb_define_method(cConstVelocityKF.klass, "setPosPeriod", VALUEFUNC(_wrap_ConstVelocityKF_setPosPeriod), -1);
  cConstVelocityKF.mark = 0;
  cConstVelocityKF.destroy = (void (*)(void *)) free_jafar_lines_ConstVelocityKF;
  cConstVelocityKF.trackObjects = 0;
}


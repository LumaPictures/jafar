/* $Id$ */

/*!
  \addtogroup kernel Module kernel

\version 0.3

\author 
  thomas.lemaire@laas.fr

This module defines some jafar common tools such as standard
exceptions, debug message facility, data logging facility,...

\section secKernelHistory History

	- 0.3 (2011-02-15) - Handling larges files in csvFile
  - 0.2 (2005-10-14) - Add a better debug system
  - 0.1 (2004-09-09) - Initial version

\section secKernelDebugPath Format of the debug path

When sending a debug message, or adding trace information to an jafar::kernel::Exception, the location of this action in the source code is added. By default the format of this information  is the following:

\verbatim
D:module/file:line: message
\endverbatim
This form is convenient since it is compact. One could prefer to have the full path of the file in order to copy/paste this path. This can be obtained defining flag \c JFR_DEBUG_FULL_PATH in module kernel:
\verbatim
D:/full/path/to/module/file:line: message
\endverbatim

\section secKernelMacro Macro

tools.tcl provides several usefull commands.

\subsection subsecKernelMacroRehash rehash macro

Two kinds of macro can be used with the jafar tcl shell:
  - macros distributed within jafar modules (\ref secModuleMacro), 
  - user defined macros

The \c addHashedDirectory and \c rehash commands provide a handfull
way to (re)source user defined macros. One can add directories
containing his macros using \c kernel::addHashedDirectory procedure,
and call \c rehash to resources these macros (\c rehash is exported to
the global namespace, specifying \c kernel:: is useless). To do things
automatically, \c .tclshrc can be modified:

\verbatim
source $env(JAFAR_DIR)/share/initJafar.tcl
kernel::addHashedDirectory "/home/thomas/jafar_macros/test"
rehash
\endverbatim
  


\section secKernelInterface Tcl interface (generated by swig)

  The interface of the module is generated from the following files:
    - kernel.i defines the wrapped classes and functions,
    - kernelTools.i defines functions to be used in the interactive shell,
    - kernelException.i defines the \c try { } \c catch block
for this module.

*/

